<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>royvanrijn</title>
    <description>Java, algorithms, math, science and more!</description>
    <link>http://royvanrijn.com/</link>
    <atom:link href="http://royvanrijn.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 12 May 2016 13:36:21 +0200</pubDate>
    <lastBuildDate>Thu, 12 May 2016 13:36:21 +0200</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>How to become a software architect</title>
        <description>&lt;p&gt;Yesterday, on the &lt;a href=&quot;http://virtualjug.com/&quot;&gt;vJUG&lt;/a&gt; mailing list, Gilberto Santos asked the following question:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;I’m working as Software Engineer and as intend to grow up to architect position, now on I was wondering how to best way to get there , should be : &lt;/p&gt;

  &lt;p&gt;Java certifications&lt;/p&gt;

  &lt;p&gt;Masters &lt;/p&gt;

  &lt;p&gt;Both ?&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;I replied to him over the email, but it might be something more developers are struggling with, time for a blog post!&lt;/p&gt;

&lt;h1 id=&quot;architects-should-code&quot;&gt;Architects should code&lt;/h1&gt;

&lt;p&gt;There are two types of software architect:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The one that draws Visio® diagrams&lt;/li&gt;
  &lt;li&gt;The one that develops/codes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first type of architect likes to talk, have meetings, draw diagrams and give orders. This, to me, is &lt;strong&gt;not&lt;/strong&gt; good.&lt;/p&gt;

&lt;p&gt;Architects should write code, they should be part of a team. In fact, everybody that writes code &lt;em&gt;is&lt;/em&gt; effectively an architect and should have basic knowledge about architecture principles. For example every programmer should know about the &lt;a href=&quot;https://nl.wikipedia.org/wiki/SOLID&quot;&gt;SOLID&lt;/a&gt; principles.&lt;/p&gt;

&lt;p&gt;Simon Brown has some good presentations on this topic on his website &lt;a href=&quot;http://www.codingthearchitecture.com/presentations/&quot;&gt;coding the architecture&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;mistakes&quot;&gt;Mistakes&lt;/h1&gt;

&lt;p&gt;The best advice I can give a developer that wants to grow into a senior/architect position is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make mistakes, lots of them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to become a better architect the most important skill to master is the art of making mistakes, noticing them, and not repeating them in the future. Most ‘enterprise’ architects I’ve worked with set up a project and leave before the thing they had designed starts to rot, smell and fall apart. They never experience the flipside of what they set up, you can make everything look good on paper.&lt;/p&gt;

&lt;p&gt;As a programmer and architect you need to experience this ‘project rot’. To learn you need to feel the mistakes that are in every system. Once you start seeing problems, admit the things you’ve made aren’t perfect, and start changing them. Try to fix the mistakes.&lt;/p&gt;

&lt;p&gt;Matt Damon would say: &lt;em&gt;“I’m going to have to refactor the shit out of this.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This experience is what makes you a &lt;em&gt;real&lt;/em&gt; architect. The best architects I’ve worked with knew instantly what needed to change and which solutions would work better than others. They develop an instinct for this. In Dutch we have a saying &lt;em&gt;‘they know where the shoe pinches’&lt;/em&gt;. Which means: just by looking at it they have a ‘feel’ for what hurts and will cause problems (in the future).&lt;/p&gt;

&lt;h1 id=&quot;however&quot;&gt;However….&lt;/h1&gt;

&lt;p&gt;This experience/instinct is what makes you a good architect and a good programmer. But sadly this doesn’t directly get you a better job or position within a company. Managers, recruiters and HR can’t easily test for this instinct. Sadly: the thing they look at most of the time is certifications.&lt;/p&gt;

&lt;p&gt;For example, I’ve mentioned the &lt;a href=&quot;https://nl.wikipedia.org/wiki/SOLID&quot;&gt;SOLID&lt;/a&gt; principles, and they are very important. It takes a maximum of 5 minutes to learn the acronym and use it in job interviews or get a certification. To really understand it though you need to &lt;em&gt;experience&lt;/em&gt; SOLID. You need to encounter situations where huge classes have a lot of responsibilities. This is the problem with most certifications: they encourage you to memorize rules and principles, not to &lt;strong&gt;understand&lt;/strong&gt; them. I’d rather have someone in my team that naturely breaks up code into clean interfaces than someone who memorized that the ‘I’ in SOLID stands for the ‘Interface segregation principle’.&lt;/p&gt;

&lt;p&gt;Once you developed this ‘architect instinct’, people will notice it. Colleagues will remember and this will help you get better jobs and positions in the future. You’ll need to prove yourself and grow your network. Try to get recommendations from people you’ve worked with and you will become a &lt;strong&gt;real&lt;/strong&gt; senior programmer and architect.&lt;/p&gt;

</description>
        <pubDate>Tue, 10 May 2016 12:25:02 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2016/05/how-to-become-a-software-architect/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/05/how-to-become-a-software-architect/</guid>
        
        <category>software</category>
        
        <category>architect</category>
        
        <category>patterns</category>
        
        <category>mistakes</category>
        
        <category>carreer</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>The Prettiest Code</title>
        <description>&lt;p&gt;This afternoon I started to wonder… &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve been a programmer now for 20+ years, but what is the &lt;em&gt;best&lt;/em&gt; piece of code I’ve written in all these years?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first thing that popped in my mind was &lt;a href=&quot;/blog/2011/02/de-bruijn-sequence-in-constant-amortized-time/&quot;&gt;this&lt;/a&gt;. It is a piece of code that can very quickly, in near linear time, generate &lt;a href=&quot;/blog/2011/02/generating-de-bruijn-sequences-and-lyndon-words/&quot;&gt;de Bruijn sequences&lt;/a&gt;. I ‘invented’ it after reading a scientific paper that described how to quickly generate ‘&lt;a href=&quot;https://en.wikipedia.org/wiki/Lyndon_word&quot;&gt;Lyndon words&lt;/a&gt;’. I knew with Lyndon words you could easily generate the &lt;a href=&quot;/blog/2011/02/generating-de-bruijn-sequences-and-lyndon-words/&quot;&gt;de Bruijn sequences&lt;/a&gt;. So I implemented it and adopted it for de Bruijn. Read more about this &lt;a href=&quot;/blog/2011/02/de-bruijn-sequence-in-constant-amortized-time/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why is this my favourite piece of code? Well, it is small, compact and does something impressive. I couldn’t find a lot of implementations that had the fast runtime my code had. And it wasn’t trivial to implement, I had to do quite a lot of research and it felt like I myself did a little inventing. I probably wasn’t the first to write the algorithm though, but it felt like that for a while.&lt;/p&gt;

&lt;h1 id=&quot;but-is-it&quot;&gt;But is it…?&lt;/h1&gt;

&lt;p&gt;As a programmer I &lt;strong&gt;write&lt;/strong&gt; code every day. And what I do even more is &lt;strong&gt;read&lt;/strong&gt; code. If I have to guess, for each line I write I’ve read about ten times more. And after more than two decades of programming, I’ve seen my share of source code. This taught me something important. Is the piece of code I mentioned the best code I’ve written? I don’t think so.&lt;/p&gt;

&lt;p&gt;What I thought the best code should have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Looks smart&lt;/li&gt;
  &lt;li&gt;Amazes people&lt;/li&gt;
  &lt;li&gt;Jumps out&lt;/li&gt;
  &lt;li&gt;‘I could have never created that!’&lt;/li&gt;
  &lt;li&gt;It is &lt;strong&gt;magical&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code I picked sure had some of these properties. But is it really the prettiest code I’ve written? &lt;strong&gt;No.&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When you are working in a large codebase the best (and prettiest) code has the following properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Doesn’t stand out&lt;/li&gt;
  &lt;li&gt;Looks trivial&lt;/li&gt;
  &lt;li&gt;You don’t notice it’s there&lt;/li&gt;
  &lt;li&gt;You hardly ever need to change it&lt;/li&gt;
  &lt;li&gt;‘Gah, anyone could have written this’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best code is code you don’t notice, code that doesn’t stand out, code that looks like anyone could have written it. It doesn’t contain smart things, it looks &lt;em&gt;mundane&lt;/em&gt;. This is something we should always strive for… simple code.&lt;/p&gt;

&lt;p&gt;So what is the best piece of code I’ve ever written? It is the code that will never be &lt;em&gt;git-blamed&lt;/em&gt;, nobody will ask questions about it and nobody will even notice it exists.&lt;/p&gt;

</description>
        <pubDate>Tue, 10 May 2016 12:25:02 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2016/05/the-prettiest-code/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/05/the-prettiest-code/</guid>
        
        <category>code</category>
        
        <category>pretty</category>
        
        <category>languages</category>
        
        <category>simple</category>
        
        <category>readable</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Biometric passwords: No!</title>
        <description>&lt;p&gt;Please sit down, we need to have a talk, programmer to programmer.&lt;/p&gt;

&lt;p&gt;Over the last decade we’ve had a lot of problems with authentication. For example, we’ve stored plain text passwords in the database. We’ve learned from this and nobody is doing this anymore right? If you are, please deposit your programming-license in the nearest trash can.&lt;/p&gt;

&lt;h2 id=&quot;latest-challenge-biometrics&quot;&gt;Latest challenge: Biometrics&lt;/h2&gt;

&lt;p&gt;It is time to talk about the latest problem in IT: biometric data.&lt;/p&gt;

&lt;p&gt;Some websites are using biometrics, such as your &lt;em&gt;fingerprint&lt;/em&gt;, as your &lt;em&gt;password&lt;/em&gt;. This sounds great, very hard to fake, unique to you. But there is a problem… what happens when there is a data leak?&lt;/p&gt;

&lt;p&gt;If you store passwords in the database (hashed or not), and they get leaked, it is bad. You need to tell all the users to change their passwords immediately. But what happens when you store biometric data and it gets leaked?&lt;/p&gt;

&lt;p&gt;The only way to change your fingerprint is this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fingerprint_remover.jpg&quot; alt=&quot;Fingerprint removal tool&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rather painful… and even worse, all devices and websites that use your fingerprint have the &lt;em&gt;same&lt;/em&gt; password.&lt;/p&gt;

&lt;p&gt;We don’t want to share passwords on multiple websites/devices!&lt;/p&gt;

&lt;h2 id=&quot;not-a-password&quot;&gt;Not a password&lt;/h2&gt;

&lt;p&gt;There is no real solution, as long as you ensist of using biometric data as a password. Even if you use a nice salted hash, it will eventually be leaked, with big consequences.&lt;/p&gt;

&lt;p&gt;A better way to use biometrics in authentication is to treat it as a username. It is a great match, it identifies &lt;strong&gt;you&lt;/strong&gt;. It is not your secret password, it is your username. That means you still need to provide a password, but having the added biometric username does increase security a lot. Of course if there is a database leak, your fingerprint can still be stolen, but that is the entire point. If you touch a glass door you’re also leaving your fingerprint. Using fingerprints as password is like dropping pieces of paper with your secret password all over the place.&lt;/p&gt;

&lt;p&gt;Fingerprints (and other biometrics) are not secure, you can never change them once compromised, not suited as passwords. If you really want to use it, use them as usernames.&lt;/p&gt;

</description>
        <pubDate>Mon, 02 May 2016 10:03:01 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2016/05/biometric-passwords/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/05/biometric-passwords/</guid>
        
        <category>biometric</category>
        
        <category>password</category>
        
        <category>hashing</category>
        
        <category>salted</category>
        
        <category>fingerprint</category>
        
        <category>voice</category>
        
        <category>iris</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Deprecating Optional.get()</title>
        <description>&lt;p&gt;On the OpenJDK core mailinglist (and Twitter) there is a discussion about Java’s &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html&quot;&gt;Optional&lt;/a&gt;.
Before diving into that discussion, lets take a look at what Optional does and how you can use it.&lt;/p&gt;

&lt;h2 id=&quot;checking-for-null&quot;&gt;Checking for null&lt;/h2&gt;

&lt;p&gt;What do you do when your code calls an external service or &lt;em&gt;god forbid&lt;/em&gt; a microservice, and the result isn’t always available?&lt;/p&gt;

&lt;p&gt;Most of the time the protocol you are using facilitates in the optional part, for example in REST you’ll get a &lt;em&gt;404&lt;/em&gt; instead of JSON. Getting this &lt;em&gt;404&lt;/em&gt; forces you to think about this scenario and do something when this happens.&lt;/p&gt;

&lt;p&gt;But what do you do when you’re calling a framework (on the boundary of your code) and the value isn’t always known?&lt;/p&gt;

&lt;p&gt;You either get the value or the result is a dreaded &lt;strong&gt;null&lt;/strong&gt;. This causes a lot of null checks, or bugs where the code just crashes with a NullPointerException.&lt;/p&gt;

&lt;p&gt;Example (old skool, Java 7):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//can be null&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ProcessResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrderEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;succeeded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;storeResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code is not very pleasant to read. But we Java programmers didn’t have or need anything better… until we started to adopt a more functional style of programming.&lt;/p&gt;

&lt;h2 id=&quot;javautiloptional&quot;&gt;java.util.Optional&lt;/h2&gt;

&lt;p&gt;What happens when you are processing a &lt;em&gt;stream&lt;/em&gt; and some values are &lt;em&gt;null&lt;/em&gt;? You don’t want null checks inside a stream! This is where Java 8’s Optional comes in. If you’re not (yet!?) using Java 8, there are other implementations as well. For example &lt;a href=&quot;https://github.com/google/guava&quot;&gt;Google Guava&lt;/a&gt; has an Optional as well.&lt;/p&gt;

&lt;p&gt;Optional is a class that ‘might’ have a given value in it, or not, it is optional. So how exactly is this helpful? Instead of checking for null this wrapper class can handle some situations for you.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;OrderEngine:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filteredResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;ProcessResult:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;succeeded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;filteredResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ifPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Database:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or the shorter ‘fluid’ version:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;OrderEngine:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;ProcessResult:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;succeeded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ifPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Database:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even if the &lt;em&gt;Optional&lt;/em&gt; is empty in either reading the order or processing the order… nothing breaks. No NullPointerException, nothing, just no executed lambda storing the result in the end. We’ve eliminated the need for a null check.&lt;/p&gt;

&lt;p&gt;As you can see Optional can really clean up your code. You don’t need to worry about null checks anymore.&lt;/p&gt;

&lt;p&gt;So what is the problem with Optional.get()?&lt;/p&gt;

&lt;h2 id=&quot;optionalget-deprecation-discussion&quot;&gt;Optional.get() deprecation discussion&lt;/h2&gt;

&lt;p&gt;Pretty much out of the blue on the OpenJDK mailinglist &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/core-libs-dev/2016-April/040484.html&quot;&gt;an email arrived&lt;/a&gt; with a &lt;a href=&quot;http://openjdk.java.net/guide/webrevHelp.html&quot;&gt;webrev&lt;/a&gt; (similar to a patch file) that contained the deprecation of &lt;em&gt;Optional.get()&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The get() method is too easy to find, and the name isn’t quite what you’d expect, and the webrev author claims there are a lot of cases online where people made the same mistakes.&lt;/p&gt;

&lt;p&gt;Many programmers, when they first encounter &lt;em&gt;Optional&lt;/em&gt;, don’t know what to do. They look in their IDE and the first thing that pops up is &lt;em&gt;get()&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It is just an easy method to call:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This works fine! Until there is a situation where the value is not available to the &lt;em&gt;Optional&lt;/em&gt;. In that case it will throw an NoSuchElementException. How can we solve this? Well, we could do the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maybeOrder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maybeOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maybeOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the ‘safe’ way, but it could just as well have been a null check now. There is likely a much cleaner way to process your &lt;em&gt;Optional&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you want to do something with the result, use &lt;em&gt;filter&lt;/em&gt;, &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;ifPresent&lt;/em&gt; (and many others).&lt;/li&gt;
  &lt;li&gt;If you need to return something, either return an Optional yourself, or get a default value by calling &lt;em&gt;orElse&lt;/em&gt;, &lt;em&gt;orElseGet&lt;/em&gt; or &lt;em&gt;orElseThrow&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is all you need, why have a &lt;em&gt;get&lt;/em&gt;-method?&lt;/p&gt;

&lt;p&gt;The proposal on the mailinglist is to deprecate the &lt;em&gt;get()&lt;/em&gt; method and rename it to &lt;em&gt;getWhenPresent()&lt;/em&gt;. This name change should warn people that it might not be present and they should check &lt;em&gt;isPresent&lt;/em&gt; before calling &lt;em&gt;get()&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Instead of embracing this change some people on the mailinglist argue against deprecation, some of their reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Renaming will break a &lt;em&gt;LOT&lt;/em&gt; of code, well, not really break the code, it will cause deprecation warnings&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;getWhenPresent()&lt;/em&gt; instead of &lt;em&gt;get()&lt;/em&gt; just adds noise to the code, it doesn’t solve anything&lt;/li&gt;
  &lt;li&gt;People should just read the JavaDoc, it clearly states what &lt;em&gt;get()&lt;/em&gt; does and throws&lt;/li&gt;
  &lt;li&gt;Guava’s Optional also has the same &lt;em&gt;get()&lt;/em&gt; method, they’ve never heard about the problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most honest and one of the more powerful replies in the discussion was &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/core-libs-dev/2016-April/040531.html&quot;&gt;from Brian Goetz&lt;/a&gt; himself:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As the person who chose the original (terrible) name, let me weigh in…&lt;/p&gt;

  &lt;p&gt;……&lt;/p&gt;

  &lt;p&gt;I’d like to see it fixed, and the sooner the better.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He is clearly in favor of deprecation… what is your opinion? Let me know in the comments!&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Apr 2016 14:10:09 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2016/04/deprecating-optional-get/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/04/deprecating-optional-get/</guid>
        
        <category>guava</category>
        
        <category>optional</category>
        
        <category>lambda</category>
        
        <category>deprecating</category>
        
        <category>ispresent</category>
        
        <category>getwhenpresent</category>
        
        <category>jep</category>
        
        
        <category>Java Programming</category>
        
      </item>
    
      <item>
        <title>The collapse of Java EE?</title>
        <description>&lt;p&gt;Recently there has been a lot of discussion about the state of Java EE and Oracle’s stewardship. There seems to be happening a lot. There is the fact that a lot of evangelist are leaving Oracle. There have been (Twitter) ‘fights’ between developers from Pivotal and Reza Rahman. And there are the Java EE Guardians, a group formed by Reza after he left Oracle.&lt;/p&gt;

&lt;p&gt;And during the last JCP ‘&lt;a href=&quot;https://jcp.org/aboutJava/communityprocess/ec-public/materials/2016-04-05/April-2016-Public-Minutes.html&quot;&gt;Executive Committee Meeting Minutes&lt;/a&gt;’ the London Java Community (LJC) openly expressed their worries:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Martijn said that while he recognizes Oracle’s absolute right to pursue a product strategy and allocate resources in ways that meet their business interests, the LJC is concerned that the lack of progress and the absence of any explanation from Oracle is doing significant harm to the Java community and ecosystem.&lt;/p&gt;

  &lt;p&gt;He explained that “splinter groups” are discussing taking over both the code work and thought leadership of Java EE, and that many companies are building proprietary frameworks such as microservices stacks, leading to even more fragmentation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are splinter groups forming, companies are building frameworks and stacks without following Java EE or contributing to future Java EE specs. People in the blogosphere/tweetosphere are complaining and worrying about it… but is it really a problem?&lt;/p&gt;

&lt;p&gt;In my personal opinion: &lt;strong&gt;No&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There have always been companies experimenting, pioneering new technologies, without following Java EE specifications. This is for example how the Spring Framework got as big as it did. Remember however: Spring really shaped the future of Java EE, without it we might still be coding EntityBeans.&lt;/p&gt;

&lt;p&gt;I think it might not even be a bad thing for Java EE to take a little break. There is a lot of unproven technology happening at the moment, for example there are the reactive frameworks and everything related to microservices. The landscape is changing quickly right now.&lt;/p&gt;

&lt;p&gt;The worst thing that Java EE can do is to come up with their own new standards for these technologies while we, as developers, haven’t really worked out the quirks yet. Historically the best Java EE specs (IMHO) are the ones that came late to the party. But those are built on years of experimentation and crystallization. Those specs looked at everything the market had to offer, brought the relevant groups together and made it work.&lt;/p&gt;

&lt;h2 id=&quot;so-there-is-nothing-wrong&quot;&gt;So there is nothing wrong?&lt;/h2&gt;

&lt;p&gt;There is one big danger to Java EE right now. It is the fact people are complaining. If we don’t stop this, it might all become a selffulfilling prophecy.&lt;/p&gt;

&lt;p&gt;Instead of worrying about Java EE, lets build tools and frameworks that are worth becoming an official spec. For example, look at the work &lt;a href=&quot;http://blog.joda.org/&quot;&gt;Stephen Colebourne&lt;/a&gt; did with &lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;Joda Time&lt;/a&gt;. He was fed up with the horrible &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Date.html&quot;&gt;java.util.Date&lt;/a&gt; and decided to make something better. After years of programming and growing a huge fanbase it was finally turned into an excellent specification (&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=310&quot;&gt;JSR-310&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you look at it, the most important thing Java EE might have done for us is bringing the relevant groups together, share ideas and distill the best practices (and writing those down as specifications). It is exactly the opposite of what is happening right now. I don’t mind splinter groups forming, if they get the right people together and work together towards forming solid specifications and implementations, why not?&lt;/p&gt;

&lt;p&gt;I’m pretty sure Oracle (with Java EE) will take a look at the proposals and adopt them.&lt;/p&gt;

&lt;p&gt;The most important thing is that we keep working together!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;:
Some people have warned me that I’m being &lt;em&gt;too&lt;/em&gt; optimistic. But time will tell, maybe Oracle will kill off Java EE, maybe they won’t. Maybe everything will take a turn for the worse, maybe it won’t.&lt;/p&gt;

&lt;p&gt;For now I’ll just do what the Dalai Lama suggests: Choose to be optimistic, it feels better.&lt;/p&gt;

</description>
        <pubDate>Mon, 25 Apr 2016 10:10:09 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2016/04/the-collapse-of-java-ee/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/04/the-collapse-of-java-ee/</guid>
        
        <category>java ee</category>
        
        <category>jcp</category>
        
        <category>guardians</category>
        
        <category>specification</category>
        
        <category>spring framework</category>
        
        
        <category>Java Programming</category>
        
      </item>
    
      <item>
        <title>Flipping the diamond - JEP 286</title>
        <description>&lt;p&gt;After my blogpost yesterday &lt;a href=&quot;http://royvanrijn.com/blog/2016/03/adding-var-val-to-java&quot;&gt;Pros and cons of JEP 286&lt;/a&gt; I’ve received a lot of feedback.&lt;/p&gt;

&lt;p&gt;The more I’ve been thinking about var/val it seems that my biggest mental hurdle is the Java 7 diamond operator. The diamond operator is good, it eliminates typing, and I like it… but I have the feeling it could be so much better!&lt;/p&gt;

&lt;p&gt;Instead of (or in addition to) adding &lt;em&gt;var&lt;/em&gt; and &lt;em&gt;val&lt;/em&gt; I’d love to see a solution where we could ‘flip’ the side of the diamond operator.&lt;/p&gt;

&lt;p&gt;Look at the following example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// Java 7 with diamond operator:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Proposed var: (saves 3 characters)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Flipped diamond operator: (larger, but more readable IMHO)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case adding var/val doesn’t improve much, we still need to specify our generics &lt;em&gt;somewhere&lt;/em&gt;, and now it has moved.&lt;/p&gt;

&lt;p&gt;But look at the following example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// Java 7 with diamond operator:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Proposed var:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Flipped diamond operator:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The thing is: There is much more to win on the LHS with the diamond operator than we currently have with the RHS diamond. In most cases you’re going to call code that has already defined the typing, in all those cases you can skip it LHS.&lt;/p&gt;

&lt;p&gt;If it is possible to add &lt;em&gt;var&lt;/em&gt; and infer everything, it should also be technically possible to have a flipped side diamond operator right? Or am I missing something?&lt;/p&gt;

</description>
        <pubDate>Tue, 22 Mar 2016 16:41:23 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2016/03/flipping-the-diamond/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/03/flipping-the-diamond/</guid>
        
        <category>java</category>
        
        <category>jep286</category>
        
        <category>val</category>
        
        <category>var</category>
        
        <category>jdk9</category>
        
        <category>java9</category>
        
        <category>diamond operator</category>
        
        
        <category>Java Programming</category>
        
      </item>
    
      <item>
        <title>JavaMail API: Message in EML format</title>
        <description>&lt;p&gt;Our application was already using JavaMail (javax.mail.*) as a way to inform our users. But for logging purposes we wanted to store all the emails we send in our database (and make them downloadable using our GUI).&lt;/p&gt;

&lt;p&gt;It turns out this is pretty easy to do!&lt;/p&gt;

&lt;p&gt;Let’s start with some very basic email code we already had in place:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// Some method to construct a MimeMessage:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createMailMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Transport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What we need to do now is to ‘render’ the entire email in a binary format, including all the possible attachements, multipart things, from and to headers etc.&lt;/p&gt;

&lt;p&gt;It turns out there is a convinient method for doing just that: &lt;em&gt;message.writeTo(OutputStream)&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createMailMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// some method to construct a MimeMessage&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Retrieve the entire message as byte[]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toByteArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Next we store the byte[] in our database (JPA) entity:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ArchivedMail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;archivedMail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArchivedMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mailArchive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;archivedMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Transport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our own little POJO entity (&lt;em&gt;ArchivedMail&lt;/em&gt;) is stored in the database with some additional information that allows us to search the messages. The final step is to make a download link and present the email in a readable format to the users.&lt;/p&gt;

&lt;p&gt;We’re using Wicket and thus the following example is Wicket code, but you could just as easily create a Servlet to return the data:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// Add the Wicket link-component to our page:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArchivedMail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wicketLinkId&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;somemail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IResourceStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AbstractResourceStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// When clicked output a stream which contains the raw byte[]:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getModelObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// Add the content type for an EML file:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;message/rfc822&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Schedule the handler to return our resource stream (with a fancy name):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;getRequestCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scheduleRequestHandlerAfterCurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ResourceStreamRequestHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mail.eml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Using JavaMail (javax.mail) it is very easy to get the ‘raw’ contents of an email when sending it.&lt;/p&gt;

&lt;p&gt;This can be stored and downloaded in EML-format. It contains everything you need, mime, multipart, attachements and all the from/to headers.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Mar 2016 11:15:15 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2016/03/java-mail-message-as-download/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/03/java-mail-message-as-download/</guid>
        
        <category>java</category>
        
        <category>message</category>
        
        <category>javamail</category>
        
        <category>mimemessage</category>
        
        <category>download</category>
        
        <category>file</category>
        
        <category>format</category>
        
        <category>eml</category>
        
        
        <category>Java Programming</category>
        
      </item>
    
      <item>
        <title>Pros and cons of JEP 286</title>
        <description>&lt;p&gt;A couple of weeks ago a new JDK Enhancement Proposal (JEP) has been published: &lt;a href=&quot;http://openjdk.java.net/jeps/286&quot;&gt;JEP 286&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It proposes ‘&lt;strong&gt;var&lt;/strong&gt;’ and possible also ‘&lt;strong&gt;val&lt;/strong&gt;’ as a way to declare local variables. This means that for local variables you don’t need to specify the type of your variable when it can be safely infered.&lt;/p&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// Before:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// After&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// infers int&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// infers ArrayList&amp;lt;String&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Personally I’m not convinced this is a good idea for Java, but OTOH some of my colleagues and co-workers are very happy with the proposal.&lt;/p&gt;

&lt;p&gt;Let’s look at some of the pros and cons of this proposal.&lt;/p&gt;

&lt;h2 id=&quot;pro-less-typing&quot;&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Less typing!&lt;/h2&gt;

&lt;p&gt;There is one obvious pro: Less typing.&lt;/p&gt;

&lt;p&gt;‘var’ is just three characters, while most other local variables type names are much longer.&lt;/p&gt;

&lt;p&gt;Instead of typing &lt;strong&gt;int&lt;/strong&gt;, &lt;strong&gt;List&lt;/strong&gt;, &lt;strong&gt;Person&lt;/strong&gt; or &lt;strong&gt;SpringObjectFactoryManagerTemplateProxyDelagate&lt;/strong&gt; you just have &lt;strong&gt;var&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// Instead of:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// You can now have:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// We saved 10 keystrokes! (&amp;lt;- probably less if you know shortcuts in your IDE)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;con-readability&quot;&gt;&lt;strong&gt;Con&lt;/strong&gt;: Readability&lt;/h2&gt;

&lt;p&gt;The biggest advantage of Java over other languages is the readability. The language Java is a bit verbose, but this is actually a good thing when it comes to reading the code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Code is read more than it is written&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consider the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myVariable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calculateSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What is the type of &lt;em&gt;myVariable&lt;/em&gt;? When you are writing the code, you probably have a good idea why you called &lt;em&gt;dependency&lt;/em&gt; and what you receive as return value.&lt;/p&gt;

&lt;p&gt;But when you are reading the code, there is no way of knowing what &lt;em&gt;myVariable&lt;/em&gt; is… you probably need your IDE to tell you, or look at the code of the dependency.&lt;/p&gt;

&lt;p&gt;I personally think this is a con regarding the JEP. I’d rather have a verbose language where the IDE helps me with autocomplete and hide things… than having a language that &lt;em&gt;needs&lt;/em&gt; an IDE to help me makes sense of the code.&lt;/p&gt;

&lt;h2 id=&quot;pro-adding-var-doesnt-break-anything&quot;&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Adding &lt;strong&gt;var&lt;/strong&gt; doesn’t break anything&lt;/h2&gt;

&lt;p&gt;Some peope think (and argue) that adding this feature breaks backwards compatibility (because of the new keyword).&lt;/p&gt;

&lt;p&gt;But this is &lt;strong&gt;not&lt;/strong&gt; true!&lt;/p&gt;

&lt;p&gt;When ‘var’ gets added it won’t be a keyword, it’ll be a ‘reserved type name’. This means that the following code for example would be working just fine:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// this compiles just fine:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;var&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;con-rhs-versus-lhs&quot;&gt;&lt;strong&gt;Con&lt;/strong&gt;: RHS versus LHS&lt;/h2&gt;

&lt;p&gt;This JEP focusses on the LHS (left-hand side) declaration by removing the need to specify a type. But recently, in Java 7, Java has introduced the diamond operator to eliminate verbosity in the RHS (right-hand side) declaration. With JEP 286, these two collide:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// Before Java 7 &amp;#39;diamond operator&amp;#39;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// With Java 7 &amp;#39;diamond operator&amp;#39;, removing generic type on RHS:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// With JEP 286, we need to add the generic type again at the RHS...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Java, make up your mind!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;pro-and-con-refactoring&quot;&gt;&lt;strong&gt;Pro&lt;/strong&gt; and &lt;strong&gt;con&lt;/strong&gt;: Refactoring&lt;/h2&gt;

&lt;p&gt;Some people have argued that, after JEP 286, refactoring can become easier.
Look at the following, silly, example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasClosed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSomeList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isClosed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No matter what &lt;em&gt;getSomeList()&lt;/em&gt; returns, it should work as long as it has the method &lt;em&gt;isClosed&lt;/em&gt;. I think this is a weird example, because normally you would define an &lt;strong&gt;interface&lt;/strong&gt; with &lt;em&gt;isClosed&lt;/em&gt; and every class that implements this interface can be replaced/refactored as well.&lt;/p&gt;

&lt;p&gt;There is a counter argument that can be made, refactoring can also be &lt;em&gt;dangerous&lt;/em&gt; with JEP 286, look at this (crafted) example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As long as the method &lt;em&gt;generate&lt;/em&gt; returns a number the code works fine. But when someone changes the method to return an object or a String, it stops working without failing compilation. This argument however seems valid, but it would also break it you would have inlined the call to ‘&lt;em&gt;System.out.println(SomeCode.generate() + 2);&lt;/em&gt;’.&lt;/p&gt;

&lt;p&gt;This might make the problem a bit harder and more widespread. I believe there are more cases this can go wrong.&lt;/p&gt;

&lt;h2 id=&quot;try-it-out-for-yourself&quot;&gt;Try it out for yourself&lt;/h2&gt;

&lt;p&gt;The best way to get a feel for JEP 286 is just to try it out yourself!&lt;/p&gt;

&lt;p&gt;There is a pre-compiled version of JDK-9 with JEP availabe for download at the website: &lt;a href=&quot;http://iteratrlearning.com/jep286.html&quot;&gt;iteratrlearning&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;After looking at a lot of examples I’m still not convinced that JEP 286 is good nor bad. It can go either way.
There are some good &lt;strong&gt;pros&lt;/strong&gt; but also quite a lot of &lt;strong&gt;cons&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When discussing this JEP with co-workers and colleagues I often get the following reply:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The arguments you’re using have been used when C# adopted var/val, stop complaining, they did it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But did you know most coding guidelines for C# warn you for using ‘var’?&lt;/p&gt;

&lt;p&gt;Just read these &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ff926074.aspx&quot;&gt;guidelines from Microsoft&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Do not use var when the type is not apparent from the right side of the assignment.&lt;/li&gt;
    &lt;li&gt;Do not rely on the variable name to specify the type of the variable. It might not be correct.&lt;/li&gt;
    &lt;li&gt;Avoid the use of var in place of dynamic.&lt;/li&gt;
    &lt;li&gt;Use implicit typing to determine the type of the loop variable in for and foreach loops.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;This, combined with readability, makes me lean towards a &lt;em&gt;no&lt;/em&gt; for JEP 286 right now.&lt;/p&gt;

&lt;p&gt;How about you? Leave a comment!&lt;/p&gt;

</description>
        <pubDate>Mon, 21 Mar 2016 11:15:15 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2016/03/adding-var-val-to-java/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/03/adding-var-val-to-java/</guid>
        
        <category>java</category>
        
        <category>jep286</category>
        
        <category>val</category>
        
        <category>var</category>
        
        <category>jdk9</category>
        
        <category>java9</category>
        
        
        <category>Java Programming</category>
        
      </item>
    
      <item>
        <title>JShell API, design problems?</title>
        <description>&lt;p&gt;This weekend I continued working my project making a Java REPL adventure game that teaches the basics of programming (in Java). One main goal of starting this project was to get a better understanding of the JShell API, not just the tool. I’ve used the JDK 9 JShell command line tool before, and it worked great. But there is also a big API behind it you can programatically use.&lt;/p&gt;

&lt;p&gt;Let me show you how this works:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;        &lt;span class=&quot;n&quot;&gt;JShell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JShell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SnippetEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;int i = 10;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What have we done here? Well first we’ve created an instance of the JShell. This is just like starting the command line tool. Now we can call the &lt;em&gt;eval()&lt;/em&gt; function to evaluate Java code. As a result you receive so called &lt;em&gt;SnippetEvent&lt;/em&gt;s, these are classes containing the information about what happened. Let’s see what the code above returns:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SnippetEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//Output: SnippetEvent(snippet=Snippet:VariableKey(i)#1-int i = 10;,previousStatus=NONEXISTENT,status=VALID,isSignatureChange=true,causeSnippetnullvalue=10)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is quite some information in there, the event contains the actual ‘snippet’, the piece of code that was executed. Also there is a previous state, status and some other information. This is where the JShell API starts to feel weird to me. To get the &lt;em&gt;Snippet&lt;/em&gt; from the &lt;em&gt;SnippetEvent&lt;/em&gt; we can call the following method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;        &lt;span class=&quot;n&quot;&gt;SnippetEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// To get the information, we call snippet (not getSnippet()):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Snippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Next we cast our snippet to the correct subclass:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;VarSnippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vSnippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VarSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Now we can retrieve information, for example the type we&amp;#39;ve created:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;typeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//Output: int&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// We can also get the &amp;#39;value&amp;#39; of the SnippetEvent:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//Output: 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are a couple of points I don’t like about the current JShell API design here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why are the methods to &lt;strong&gt;get&lt;/strong&gt; information called .snippet() and .typeName(), why not getSnippet() and getTypeName()?&lt;/li&gt;
  &lt;li&gt;Why is the result of vSnippet.typeName() a &lt;strong&gt;String&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;Why is the result of event.value() a &lt;strong&gt;String&lt;/strong&gt;? Didn’t we have an ‘int’?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First the question about the method names. In all of the JDK code they seem to be using the bean-specification, where you have getMethods() for getting and setMethod(…) for setting. I’m not sure why this isn’t the case for the JShell API? Is this a new way Oracle is designing their API’s? Do other new JDK API’s have the same syntax?&lt;/p&gt;

&lt;p&gt;Next is the question regarding the usage of Strings. Why is the value() a String when we’ve clearly made something an int? Even worse, let’s create something that is not a primitive:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SnippetEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jdk.jshell.JShell.create();&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//Output: jdk.jshell.JShell@4cc0edeb&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is even &lt;em&gt;worse&lt;/em&gt;, the only result we get from event.value() is a String and it is clearly just the &lt;strong&gt;.toString()&lt;/strong&gt; of the actual backing object. For this API I would &lt;em&gt;love&lt;/em&gt; to see it returning the actual object instead. I understand the JShell tool uses String’s and communicates the toString(), but shouldn’t the API be more general? Or am I missing something here?&lt;/p&gt;

&lt;p&gt;Anyway, this is exactly why &lt;em&gt;more&lt;/em&gt; people should &lt;strong&gt;try these API&lt;/strong&gt;’s and share the feedback! Mail your feedback and suggestions to the mailing list.&lt;/p&gt;

&lt;p&gt;What do you think? Please leave a comment below, or… even better, share your thoughts on the &lt;a href=&quot;http://mail.openjdk.java.net/mailman/listinfo/kulla-dev&quot;&gt;mailing list&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 21 Jan 2016 20:01:11 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2016/01/jshell-api-design-problems/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/01/jshell-api-design-problems/</guid>
        
        <category>java</category>
        
        <category>jshell</category>
        
        <category>snippet</category>
        
        <category>api</category>
        
        
        <category>Java Programming</category>
        
      </item>
    
      <item>
        <title>Fantasy names using Java JShell</title>
        <description>&lt;p&gt;I’ve been a big fan of the Java JShell from the early beginning. I was even the first one on the mailing list besides the people from Oracle. I’m working on a weekend/side project involving JavaFX and JShell API now for a couple of days and something was bothering me.&lt;/p&gt;

&lt;p&gt;The project I’m working on is targetted at teaching kids to learn Java Programming in a fun way. But automaticly generated variable names called &lt;em&gt;$1&lt;/em&gt;, &lt;em&gt;$2&lt;/em&gt;, &lt;em&gt;$3&lt;/em&gt; etc are not ‘fun’ enough! Luckily I found the following method in the API:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;JShell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JShell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tempVariableNameGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomNameGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The name generator has to implement &lt;em&gt;Supplier&amp;lt;String&amp;gt;&lt;/em&gt;, with a single method &lt;em&gt;get()&lt;/em&gt;, very easy! The generator I’ve made generates semi-random fantasy character names. This is what I’ve ended up with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;is:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;assigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temporary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baiduth&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baiduth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;is:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;assigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temporary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bleibriss&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bleibriss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baiduth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Much better! If you’re interested in the project I’m working on, teaching kids Java with the JShell API and JavaFX, keep an eye out. When I have something worth showing I’ll push it to GitHub so everyone can enjoy it!&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jan 2016 20:01:11 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2016/01/fantasy-names-using-jshell/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/01/fantasy-names-using-jshell/</guid>
        
        <category>java</category>
        
        <category>jshell</category>
        
        <category>fantasy</category>
        
        <category>javafx</category>
        
        <category>naming</category>
        
        
        <category>Java Programming</category>
        
      </item>
    
  </channel>
</rss>
