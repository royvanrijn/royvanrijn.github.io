<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>royvanrijn</title>
    <description>Java, algorithms, math, science and more!</description>
    <link>http://royvanrijn.com/</link>
    <atom:link href="http://royvanrijn.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 15 May 2018 16:15:42 +0200</pubDate>
    <lastBuildDate>Tue, 15 May 2018 16:15:42 +0200</lastBuildDate>
    <generator>Jekyll v3.7.0</generator>
    
      <item>
        <title>Java and Docker, the limitations</title>
        <description>&lt;h1 id=&quot;tldr&quot;&gt;TLDR&lt;/h1&gt;

&lt;p&gt;Java and Docker aren’t friends out of the box. Docker can set memory and CPU limitations that Java can’t automatically detect. Using either Java Xmx flags (cumbersome/duplicated) &lt;em&gt;or&lt;/em&gt; the new experimental JVM flags we can solve this issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A hacky solution for older JVMs/OpenJ9 could be to use the following -Xmx option:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xmx&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgroup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit_in_bytes&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This takes the cgroup setting (in bytes) and uses it as Xmx option. Now Java can see the limit, but if you change it in Docker you don’t have to change the configuration inside your container.&lt;/p&gt;

&lt;h1 id=&quot;mismatch-in-virtualization&quot;&gt;Mismatch in virtualization&lt;/h1&gt;

&lt;p&gt;The combination of Java and Docker isn’t a match made in heaven, initially it was far from it. For starters, the whole premise of the JVM, Java Virtual Machine, was that having a Virtual Machine makes the underlying hardware irrelevant from the program’s point of view.&lt;/p&gt;

&lt;p&gt;So what do we gain by packaging our Java application inside a JVM (Virtual Machine) inside a Docker container? Not a lot, for the most part you are duplicating JVMs and Linux containers, which kills memory usage. This just sounds silly.&lt;/p&gt;

&lt;p&gt;It does make it easy to bundle together your program, the settings, a specific JDK, Linux settings and (if needed) an application server and other tools as one ‘thing’. This complete container has a better level of encapsulation from a devops/cloud point of view.&lt;/p&gt;

&lt;h2 id=&quot;problem-1-memory&quot;&gt;Problem 1: Memory&lt;/h2&gt;

&lt;p&gt;Most applications in production today are still using Java 8 and this might give you problems. Java 8 doesn’t work well with Docker. The problem is the amount of memory and CPUs available isn’t the amount of memory and CPU of &lt;em&gt;your machine&lt;/em&gt;, it is what &lt;em&gt;Docker&lt;/em&gt; is allowing you to use (duh).&lt;/p&gt;

&lt;p&gt;For example if you limit your Docker container to have 500MB of memory, this isn’t something Java is aware of. Java doesn’t see this limit.&lt;/p&gt;

&lt;p&gt;To fix this you will &lt;strong&gt;also&lt;/strong&gt; need to specify to Java there is a maximum memory limit. You’ll need to specify this &lt;em&gt;inside&lt;/em&gt; your container, at the wrong abstraction if you ask me. If you forget to tell the JVM there is a limit set by Docker you’ll have a problem. Docker will take action into its own hands and kill the process inside the container if too much memory is used! The Java process is ‘Killed’. This is not what we want…&lt;/p&gt;

&lt;p&gt;From Java 9 onwards (and from 8u131+, this was backported) there have been extra options added to the JVM:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you add these flags the JVM will look at the Linux &lt;em&gt;cgroup&lt;/em&gt; configuration. This is where Docker containers specify their maximum memory settings. Now, if your application reaches the limit set by Docker (500MB), the JVM will see this limit. It’ll try to GC. If it still runs out of memory the JVM will do what it is supposed to do, throw an OutOfMemoryException. Basically this allows the JVM to ‘see’ the limit that has been set by Docker.&lt;/p&gt;

&lt;p&gt;In the future Oracle wants to make these properties the new default.&lt;/p&gt;

&lt;h2 id=&quot;problem-2-cpu&quot;&gt;Problem 2: CPU&lt;/h2&gt;

&lt;p&gt;The second problem is that Java doesn’t understand Docker’s memory settings is solved in Java 9, but there is a similar problem with the CPU. In short, the JVM will look at the hardware and detect the amount of CPU’s and it’ll optimize to use those CPU’s. But again, Docker won’t allow you to &lt;strong&gt;use&lt;/strong&gt; all these CPU’s, there is a mismatch here. Sadly this isn’t fixed in Java 9, but was tackled in Java 10.&lt;/p&gt;

&lt;p&gt;From Java 10 onwards the available CPUs will be calculated in a different way (by default) fixing this problem.&lt;/p&gt;

&lt;h1 id=&quot;testing-java-and-docker-memory-handling&quot;&gt;Testing Java and Docker memory handling&lt;/h1&gt;

&lt;p&gt;As a fun exercise, lets verify and test how Docker handles out of memory using a couple of different JVM versions/flags and even a different JVM.&lt;/p&gt;

&lt;p&gt;First we create a test application, one that simply ‘eats’ memory and doesn’t free it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemEat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1048576&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;free memory: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;freeMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can start Docker containers and run this application to see what will happen.&lt;/p&gt;

&lt;p&gt;First we’ll start with a container that has an older version of Java 8 (update 111).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -m 100m -it java:openjdk-8u111 /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We compile and run the MemEat.java file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;javac MemEat.java

java MemEat
...
free memory: 67194416
free memory: 66145824
free memory: 65097232
Killed&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As expected, Docker has killed the our Java process. Not what we want (!). Also you can see the output, Java thinks it still has a lot of memory left to allocate.&lt;/p&gt;

&lt;p&gt;We can fix this by providing Java with a maximum memory using the &lt;em&gt;-Xmx&lt;/em&gt; flag:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;javac MemEat.java

java -Xmx100m MemEat
...
free memory: 1155664
free memory: 1679936
free memory: 2204208
free memory: 1315752
Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space
	at MemEat.main(MemEat.java:8)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After providing our own memory limits, the process is halted correctly, the JVM understands the limits it is operating under. The &lt;strong&gt;problem&lt;/strong&gt; is however that you are now setting these memory limits &lt;strong&gt;twice&lt;/strong&gt;, for Docker &lt;em&gt;AND&lt;/em&gt; for the JVM.&lt;/p&gt;

&lt;p&gt;As mentioned, with the new flags this has been fixed, the JVM will now follow the settings provided by Docker. We can test this using a newer JVM.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -m 100m -it adoptopenjdk/openjdk8 /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(this OpenJDK Java image currently contains, at the time of writing, Java 8u144)&lt;/p&gt;

&lt;p&gt;Next we compile and run the MemEat.java file again without any flags:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;javac MemEat.java

java MemEat
...
free memory: 67194416
free memory: 66145824
free memory: 65097232
Killed&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same problem exists. But we can now supply the experimental flags mentioned above:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;javac MemEat.java
java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap MemEat
...
free memory: 1679936
free memory: 2204208
free memory: 1155616
free memory: 1155600
Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space
	at MemEat.main(MemEat.java:8)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This time we didn’t set any limits on the JVM by telling it what the limits &lt;em&gt;are&lt;/em&gt;, we just told the JVM to look at the correct settings! Much better.&lt;/p&gt;

&lt;p&gt;I’ve also been experimenting with OpenJ9 recently, this free alternative JVM has been open sourced from IBMs J9 and is now maintained by Eclipse. It is fast and is very good with memory management, mindblowlingly good, often using up to 30-50% less memory for our microservices. This almost makes it possible to classify Spring Boot apps as ‘micro’ with a 100-200mb runtime nstead of 300mb+. I’m planning on doing a write-up about this very soon.&lt;/p&gt;

&lt;p&gt;To my surprise however, OpenJ9 doesn’t yet have an option similar to the flags currently (backported) in Java 8/9/10+ for cgroup memory limits. For example if we apply the previous testcase to the latest AdoptAJDK OpenJDK 9 + OpenJ9 build:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -m 100m -it adoptopenjdk/openjdk9-openj9 /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And we add the OpenJDK flags (which are ignored by OpenJ9) we get:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap MemEat
...
free memory: 83988984
free memory: 82940400
free memory: 81891816
Killed&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oops, the JVM is killed by Docker again.&lt;/p&gt;

&lt;p&gt;I really hope a similar option will be added soon to OpenJ9, because I’d love to run this in production without having to specify the maximum memory twice. Eclipse/IBM is working on a fix for this, there are already issues and even pull requests for this issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;
A slightly ugly/hacky way to fix this is using the following flag:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java -Xmx`cat /sys/fs/cgroup/memory/memory.limit_in_bytes` MemEat
...
free memory: 3171536
free memory: 2127048
free memory: 2397632
free memory: 1344952
JVMDUMP039I Processing dump event &quot;systhrow&quot;, detail &quot;java/lang/OutOfMemoryError&quot; at 2018/05/15 14:04:26 - please wait.
JVMDUMP032I JVM requested System dump using '//core.20180515.140426.125.0001.dmp' in response to an event
JVMDUMP010I System dump written to //core.20180515.140426.125.0001.dmp
JVMDUMP032I JVM requested Heap dump using '//heapdump.20180515.140426.125.0002.phd' in response to an event
JVMDUMP010I Heap dump written to //heapdump.20180515.140426.125.0002.phd
JVMDUMP032I JVM requested Java dump using '//javacore.20180515.140426.125.0003.txt' in response to an event
JVMDUMP010I Java dump written to //javacore.20180515.140426.125.0003.txt
JVMDUMP032I JVM requested Snap dump using '//Snap.20180515.140426.125.0004.trc' in response to an event
JVMDUMP010I Snap dump written to //Snap.20180515.140426.125.0004.trc
JVMDUMP013I Processed dump event &quot;systhrow&quot;, detail &quot;java/lang/OutOfMemoryError&quot;.
Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space
  at MemEat.main(MemEat.java:8)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now OpenJ9 does see the cgroup limit because it is defined as -Xmx flag.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;If you are running Java inside a Docker container, make sure that you have:&lt;/p&gt;

&lt;p&gt;Dockers memory limits defined &lt;strong&gt;AND:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The proper Java -Xmx flags &lt;strong&gt;OR&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;A JDK that knows about cgroups and use the UseCGroupMemoryLimitForHeap flags&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have the option, go for JDK 10 which has better CPU calculation support.&lt;/p&gt;

&lt;p&gt;If you want to use OpenJ9 (which I highly recommend for bringing down your memory footprint in production) you’ll still need to set both Docker &lt;strong&gt;and&lt;/strong&gt; JVM memory limits with -Xmx.&lt;/p&gt;
</description>
        <pubDate>Wed, 02 May 2018 16:14:11 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2018/05/java-and-docker-memory-limits/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2018/05/java-and-docker-memory-limits/</guid>
        
        <category>Java</category>
        
        <category>Memory</category>
        
        <category>OpenJDK</category>
        
        <category>Docker</category>
        
        <category>Microservices</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>In a microservices landscape; When do you update?</title>
        <description>&lt;p&gt;This week I’ve been stuggling with the following question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When is the right time to upgrade?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By upgrading, I mean everything: libraries, tools, Java versions, application servers, MQ servers…&lt;/p&gt;

&lt;p&gt;My current project uses a reactive upgrade policy, we upgrade for four reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Something is broken and fixed in a later version&lt;/li&gt;
  &lt;li&gt;We need or want to use a new feature&lt;/li&gt;
  &lt;li&gt;Support for a version we’re using is being dropped&lt;/li&gt;
  &lt;li&gt;The old version we’re using has a known security issue/CVE&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first two reasons are entirely up to the programmers to decide. The third reason is up to the company that gives us support. For the fourth upgrade reason, security, we have some automation in place. We are using the &lt;a href=&quot;https://www.owasp.org/index.php/OWASP_Dependency_Check&quot;&gt;OWASP dependency checker&lt;/a&gt; Maven plugin for our libraries.&lt;/p&gt;

&lt;p&gt;But:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Is a reactive update policy good enough?&lt;/li&gt;
  &lt;li&gt;Are there any pro-active strategies?&lt;/li&gt;
  &lt;li&gt;Do you want to invest in keeping your microservices up-to-date?&lt;/li&gt;
  &lt;li&gt;Do you let your services deteriorate and dispose, replace them in the future with new technologies?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More on this in my (kind-of-weekly) vlog:&lt;/p&gt;

&lt;iframe type=&quot;text/html&quot; width=&quot;640&quot; height=&quot;390&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot; src=&quot;http://www.youtube.com/embed/LRE-feZWmlM&quot;&gt;&lt;/iframe&gt;

</description>
        <pubDate>Wed, 17 Jan 2018 10:28:12 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2018/01/updating-dependencies-in-microservices/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2018/01/updating-dependencies-in-microservices/</guid>
        
        <category>YouTube</category>
        
        <category>Programming</category>
        
        <category>Vlog</category>
        
        <category>Update</category>
        
        <category>Microservices</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Fear of upgrading to Java 9, is it justified?</title>
        <description>&lt;p&gt;It seems that the adoptation of Java 9 is slow, very slow. In a &lt;a href=&quot;https://twitter.com/royvanrijn/status/950718660641017856&quot;&gt;Twitter poll&lt;/a&gt; this week I asked:
“Which version of Java are you using in production?”&lt;/p&gt;

&lt;p&gt;The poll got almost 300 replies and to my surprise just 3% of the respondents are using Java 9 at the moment. Most are using Java 8 and there are even more people using Java 6… So what is holding people back? Why is almost no-one using Java 9?&lt;/p&gt;

&lt;p&gt;It turns out a lot of people are scared to upgrade to Java 9. They think it’ll be hard to do, libraries and tools will fail them. They are scared for another Jar-hell.&lt;/p&gt;

&lt;p&gt;That is why I took one of my larger projects, that has been running in production for a long time, and try to upgrade it to Java 9.&lt;/p&gt;

&lt;h2 id=&quot;upgrading-walk-in-the-park-or-walk-in-jar-hell&quot;&gt;Upgrading: Walk in the park or walk in jar-hell?&lt;/h2&gt;

&lt;p&gt;Here are my results and findings, in a new format: &lt;strong&gt;a vlog&lt;/strong&gt;&lt;/p&gt;

&lt;iframe type=&quot;text/html&quot; width=&quot;640&quot; height=&quot;390&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot; src=&quot;http://www.youtube.com/embed/tKUNMyZ9LEU&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If you like the vlog and follow my website, please subscribe to my channel on YouTube!&lt;/p&gt;

</description>
        <pubDate>Wed, 17 Jan 2018 10:28:12 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2018/01/java-9-adoptation/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2018/01/java-9-adoptation/</guid>
        
        <category>YouTube</category>
        
        <category>Programming</category>
        
        <category>Vlog</category>
        
        <category>Upgrade</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Inverse Conway's law</title>
        <description>&lt;p&gt;Today I got to present at &lt;a href=&quot;http://www.devoxx.pl&quot;&gt;Devoxx Poland&lt;/a&gt; on being agile and managing your architecture.&lt;/p&gt;

&lt;p&gt;One of the points I made during the talk had to do with Conway’s Law. For those unfamiliar with it, here it is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;organizations which design systems … are constrained to produce designs which are copies of the communication structures of these organizations &lt;cite&gt;M. Conway&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This basically means that the code you create is likely to reflect the way the people and teams in your company communicate. For example, banks are usually pretty strict and have a tendency to document things. The code written at banks in turn have the tendency to use SOAP for example, verbose and strict.&lt;/p&gt;

&lt;p&gt;The project I’m currently working on has a very agile mindset, we change a lot and have open communication. This reflects in our codebase as well, all the code is easy to understand and easy to change (thankfully!).&lt;/p&gt;

&lt;p&gt;But lately we’ve started to move away from our old monolith and we’ve began cutting it up into microservices. That’s when I noticed something odd, which I call the &lt;strong&gt;Inverse Conway’s Law&lt;/strong&gt; (maybe it is &lt;strong&gt;Roy’s Law&lt;/strong&gt;?):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;organisations which radically change their system design should expect changes in communication structure &lt;cite&gt;Roy van Rijn&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this mean?&lt;/p&gt;

&lt;p&gt;We’ve started to move towards a microservice environment, where each team has a responsibility over a couple of services. They’ve developed it and they &lt;em&gt;own&lt;/em&gt; it. This ownership completely changed the culture in our team. Up to now if the monolithic backend was broken or offline, everyone was hurting and everyone wanted to fix this as soon as possible. With microservices, this is gone. The first thing we now do is check which microservice failed. If it isn’t theirs, it is not their problem, it’s someone elses problem now!&lt;/p&gt;

&lt;p&gt;This is just one example on how changing the design of our system changed the culture and team dynamic. It is one thing that sounds logical when you think about it, but I didn’t expect this before we started the transition.&lt;/p&gt;

</description>
        <pubDate>Thu, 22 Jun 2017 14:28:12 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2017/06/inverse-conways-law/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2017/06/inverse-conways-law/</guid>
        
        <category>Devoxx</category>
        
        <category>Programming</category>
        
        <category>Scrum</category>
        
        <category>Conway</category>
        
        <category>conference</category>
        
        
        <category>Agile</category>
        
      </item>
    
      <item>
        <title>JavaOne Rock Star 2016</title>
        <description>&lt;p&gt;Today I got an email with the subject: “Congratulations JavaOne 2016 Rock Star!”. It turns out the JavaOne 2016 Ignite session was voted enough to receive a JavaOne &lt;a href=&quot;https://www.oracle.com/javaone/rock-star-wall-of-fame.html&quot;&gt;Rock Star&lt;/a&gt; Award!&lt;/p&gt;

&lt;p&gt;I was so excited, elated even!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rockstar1.gif&quot; alt=&quot;Rocking that talk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But I quickly found out that the JavaOne Rock Star lifestyle &lt;strong&gt;isn’t&lt;/strong&gt; as much fun as it sounds.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Being 3 hours late for a meeting, even a Rock Star can’t do that.&lt;/li&gt;
  &lt;li&gt;Peeing in the corner of your office while holding a bottle of Jack Daniels, still not appreciated.&lt;/li&gt;
  &lt;li&gt;Wearing ripped jeans, a leather jacket and other than that just chest hair, is considered &lt;em&gt;too&lt;/em&gt; casual.&lt;/li&gt;
  &lt;li&gt;The groupies? It is like answering random Stack Overflow questions, non-stop, face to face.&lt;/li&gt;
  &lt;li&gt;After each coding session, smashing your MacBook on the floor… quickly becomes expensive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/drunk-wombat.jpg&quot; alt=&quot;Drunk Wombat holding bottle of Jack Daniels&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 01 Feb 2017 09:28:12 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2017/02/javaone-rock-star-2016/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2017/02/javaone-rock-star-2016/</guid>
        
        <category>Java</category>
        
        <category>JavaOne</category>
        
        <category>Rockstar</category>
        
        <category>Award</category>
        
        <category>Ignite</category>
        
        <category>conference</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Vikipedia: A Java YouTube bot</title>
        <description>&lt;p&gt;YouTube, the future of television. I’ve got a lot of subscriptions to YouTube channels that deliver quality content, and those shows are ‘cast’ (using my Chromecast) to my TV. Another thing I often do is look up information, for example I watch talks from programming conferences like &lt;a href=&quot;https://www.youtube.com/channel/UCCBVCTuk6uJrN3iFV_3vurg/videos&quot;&gt;Devoxx&lt;/a&gt; using YouTube.&lt;/p&gt;

&lt;p&gt;This gave me an idea, what if I can take some free information (like Wikipedia, all creative commons) and use that to create content for YouTube? Maybe I’ll even get some views :-)&lt;/p&gt;

&lt;p&gt;So this is what I’ve come up with, the following video is generated completely automatically:&lt;/p&gt;

&lt;iframe id=&quot;randomVikipediaVideo&quot; width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/channel/UCSjEbLaNj1yKFgQpjLoqkUw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;script&gt;

function nextVideo(autoplay) {

    /* Don't always insert the same video in the article, spread the views across the videos randomly: */
    var iframe = document.getElementById('randomVikipediaVideo');
    var allVideos = [&quot;dw_HP2AeYIU&quot;,&quot;VXNElLG9t_Q&quot;,&quot;2shv5Fv7ZNg&quot;,&quot;mnYrSUiLIgg&quot;,&quot;N45qnVlEAHw&quot;,&quot;1qBaUYcXJWM&quot;,&quot;ayZCJizN604&quot;,&quot;Z6N4bJDs9m4&quot;,&quot;AX4Ex5nYQqM&quot;,&quot;w9QF30yOGag&quot;,&quot;gruzWYNhE04&quot;,&quot;5rKxcZKIOP0&quot;,&quot;T-QvHcEMHEc&quot;,&quot;I4BR-pA9APc&quot;,&quot;QsbM9R0qAWE&quot;,&quot;4kPdhwVCAck&quot;,&quot;vV3JjOLOc0o&quot;,&quot;YU1UFQr9ezA&quot;,&quot;-6XJK7-L4Qk&quot;,&quot;1Uxn51TtA24&quot;,&quot;UknPDIoHVYc&quot;,&quot;WmTwh7AsaJQ&quot;,&quot;8dNTnrA_5gY&quot;,&quot;EH1MytpdcpM&quot;,&quot;bavzjaZLCJc&quot;,&quot;vro8u3N4HBc&quot;,&quot;k-LDzwP8jbs&quot;,&quot;dGPQUHKlabc&quot;,&quot;VlC1q_Edqj0&quot;,&quot;-zOb7D33SCE&quot;,&quot;OtyjkvlMJQY&quot;,&quot;ta3S29-evYY&quot;,&quot;KNTMCnZTp4k&quot;,&quot;UaH7hZXIiso&quot;,&quot;zIWxkcpc4cI&quot;,&quot;c5Ql0T-DHWM&quot;,&quot;whC5odvJmzA&quot;,&quot;lRpBMLmxQ3A&quot;,&quot;OEkTxgxFxm8&quot;,&quot;wzHdr1cG9qY&quot;,&quot;hRAU_4VPtVE&quot;,&quot;y8AO2YmnRgU&quot;,&quot;EzkyZefY5QI&quot;,&quot;RHmfvXO4dAc&quot;,&quot;krXrsq5MXmE&quot;,&quot;7KSlXBn9BFU&quot;,&quot;t0xr4dreV8g&quot;,&quot;wsX4dZj21pU&quot;,&quot;46OeYWZNXC4&quot;,&quot;u90MHVbJWLQ&quot;,&quot;j6DrUXCi55I&quot;,&quot;e5RxuXO1MGw&quot;,&quot;yQ12Q03RQ8M&quot;,&quot;1NU6c4CoOa4&quot;,&quot;l0EcOf-ivSI&quot;,&quot;Z1HSEsLo2M0&quot;,&quot;qDbl0gxu7Dc&quot;,&quot;EVztRfoZHQ0&quot;,&quot;yq-s6RegMzY&quot;,&quot;Mvx7WMFZ-ec&quot;,&quot;rynm5ii1gKI&quot;,&quot;hnDQzbAhQW0&quot;,&quot;RJBUHNiW_LA&quot;,&quot;z7PDxRpEuCM&quot;,&quot;GWYoMnviUTo&quot;,&quot;KJnKrh4HqO8&quot;,&quot;Qj18ci7ahXU&quot;,&quot;LVPTjW0HWCE&quot;,&quot;kKYJGL5zOdA&quot;,&quot;Gy3uG2sB0EI&quot;,&quot;EobwR1VvP6U&quot;,&quot;1e3oKKtT9Uc&quot;,&quot;9HT1Jq-pJsU&quot;,&quot;4mmTbQhYSe8&quot;,&quot;aCBmsv-Z0pY&quot;,&quot;XkytdbikWwQ&quot;,&quot;Kvh0Ks-xp_Q&quot;,&quot;Yo7Rro5aIJo&quot;,&quot;xlUjTuo11v4&quot;,&quot;3XpyQCxAFhE&quot;,&quot;upGOccVyjPk&quot;,&quot;U1XToo-yA0o&quot;,&quot;iTXIDqoozxY&quot;,&quot;Mpnaojg9CGg&quot;,&quot;G1Akiwn2b0k&quot;,&quot;YgEuC4B54Qw&quot;,&quot;owCh8KOVa1k&quot;,&quot;VE23gPaLWoI&quot;,&quot;ZKFksbkTKzI&quot;,&quot;xB1pPhgUSFo&quot;,&quot;2y9Nen8GedM&quot;,&quot;DmTxZSL0ezQ&quot;,&quot;S6L9d9oMP8k&quot;,&quot;NeaNEY_-HsQ&quot;,&quot;3lOEjy3G8zs&quot;,&quot;fabUIVQJS-U&quot;,&quot;AjlP3xVboPI&quot;,&quot;DOLK4E9CN44&quot;,&quot;xevdO-i_5X8&quot;,&quot;iBsClalmitY&quot;,&quot;tVAudOBNpSY&quot;,&quot;U5uXj1ITxvM&quot;,&quot;8ly91g6SpQY&quot;,&quot;Lx-QCSrwPVg&quot;,&quot;3Wd-AX8znpY&quot;,&quot;HVSxw2asHmw&quot;,&quot;BgtgmoAljkg&quot;,&quot;LEa03im5k5A&quot;,&quot;GofEE8LOGs4&quot;,&quot;86Swgtxs6Po&quot;,&quot;i3d1LspMBIU&quot;,&quot;PirEmJOo6CE&quot;,&quot;Lv6VILwZz1M&quot;,&quot;7YmUhQwq2YU&quot;,&quot;exePCusCm9k&quot;,&quot;H3PD7frrI_8&quot;,&quot;ghTqYWxoVrA&quot;,&quot;4rPNThNEQO4&quot;,&quot;P3o36TonBXE&quot;,&quot;5VsQd2ovTHY&quot;,&quot;HmwWy97ef5A&quot;,&quot;-0QlVaGlk1E&quot;,&quot;zO3Rl-rh6Bs&quot;,&quot;o9pkhKm_kAI&quot;,&quot;y5_fnfMm1_o&quot;,&quot;n9MQM919MDI&quot;,&quot;u73-_ofPYwA&quot;,&quot;WXWcfUwRWK8&quot;,&quot;PpyKc8dc4iQ&quot;,&quot;naEG81DttQk&quot;,&quot;4bMcrDV1vJs&quot;,&quot;BWNUqERTWyo&quot;,&quot;UCgOm1WvWB8&quot;,&quot;PjRJf-3i7wA&quot;,&quot;gCokmHyYIsk&quot;,&quot;o7Fkorc8xw4&quot;,&quot;0N81aj-0v8I&quot;,&quot;0Sts7wqwuhI&quot;,&quot;KmxQ9YvYP8U&quot;,&quot;1NuL1LFJqN4&quot;,&quot;EI9U85KR00k&quot;,&quot;sKTZ39Z55kM&quot;,&quot;RqGQRHwqD1Q&quot;,&quot;ToJ1hL_UxR8&quot;,&quot;BzVFH7dudGI&quot;,&quot;4YV-kJsnTY4&quot;,&quot;Hh1Ktyion00&quot;,&quot;cS0DksC2ThE&quot;,&quot;vVhUdj_6AJI&quot;,&quot;WBGEAkHIdEY&quot;,&quot;OhNypsK8dgs&quot;,&quot;KWgxgSwNQeg&quot;,&quot;wBq0yFH1NKA&quot;,&quot;by_kgenndME&quot;,&quot;Q3PfF8KQnnQ&quot;,&quot;qyubdFmpOzY&quot;,&quot;Fd4OuSQKSYc&quot;,&quot;M91jqRCuwSE&quot;,&quot;SZeFzFvvnww&quot;,&quot;1x9mR-8Jlk8&quot;,&quot;v60DhhXigj8&quot;,&quot;L2EtzWbmsSM&quot;,&quot;8OEh0WRIZpU&quot;,&quot;A6Fq0BDKUkI&quot;,&quot;B0fISmMwe0o&quot;,&quot;UJvXxTLMNCc&quot;,&quot;Oyit-UF0hU0&quot;,&quot;sJnT-ZBx-aw&quot;,&quot;w9DhHHmxkxk&quot;,&quot;09s8AsA_1_8&quot;,&quot;WpULC6QbFs8&quot;,&quot;oooZW-0Ib00&quot;,&quot;D6doByXH2qg&quot;,&quot;YNskJwjp2qs&quot;,&quot;GCwyct06ewQ&quot;,&quot;1wwGHpuoTRY&quot;,&quot;xCjBcNHVMN8&quot;,&quot;XXjCXeov7MU&quot;,&quot;j5pp75JMHLg&quot;,&quot;tN0Xhw1kXek&quot;,&quot;dnKc7ujewTg&quot;,&quot;508DpfT1xjM&quot;,&quot;7eeef5LwqBc&quot;,&quot;L3BFStFNPUc&quot;,&quot;b7Ap5MoqYOI&quot;,&quot;xBdrHXqTU9w&quot;,&quot;N7zUVxlp4kU&quot;,&quot;tqfJ3x337VE&quot;,&quot;jG4XesjoSfw&quot;,&quot;z79-HH7SgmA&quot;,&quot;Uu3qbMp9DVs&quot;,&quot;au8KcahWxG4&quot;,&quot;k2mDwz01YZk&quot;,&quot;f-vvDNc5mT0&quot;,&quot;Idg7R-9OI74&quot;,&quot;mhxE8xaaFi0&quot;,&quot;XryqTofd1tE&quot;,&quot;4yItBLDG6pc&quot;,&quot;zuKkQpziypw&quot;,&quot;9ewf9WEYy2M&quot;,&quot;uZK0M_K34MU&quot;,&quot;UIwzSvZYvBY&quot;,&quot;du0aqYDnd0Q&quot;,&quot;jy9azLipJbA&quot;,&quot;J-6yhQRz6_o&quot;,&quot;N3N2mQ7laF4&quot;,&quot;LtxnksrTXG0&quot;,&quot;-jqVIXfCkBI&quot;,&quot;P3MZsfQ4its&quot;,&quot;YVU1Ko9xKkU&quot;,&quot;s1R40DPur88&quot;,&quot;wfgny3djwGk&quot;,&quot;YLZ2x1-r6AQ&quot;,&quot;fUQX7gPNr7I&quot;,&quot;Cru4l_KrDv0&quot;,&quot;D1iuOpxeytw&quot;,&quot;FGhk31NdBoY&quot;,&quot;YPSW9YpFlu0&quot;,&quot;2ZST_JEpfRU&quot;,&quot;ZwH0E4EypOg&quot;,&quot;HA19BfHDrFk&quot;,&quot;blpoR8ooqI0&quot;,&quot;uI0KwvCqFVw&quot;,&quot;PoAI247TCWo&quot;,&quot;tF1gASEhQEQ&quot;,&quot;aZKK6d5IDbI&quot;,&quot;_jEgK66-ixg&quot;,&quot;2cb4Vt8EBEY&quot;,&quot;eXhlj12yOkM&quot;,&quot;-X9sVpmzkko&quot;,&quot;JTpPXmyER94&quot;,&quot;KDSkPksssrI&quot;,&quot;LV52_vn82tM&quot;,&quot;cvAu2-xaJ7k&quot;,&quot;KMq8JJYSSVM&quot;,&quot;92PtXvteSeI&quot;,&quot;obf4rmqWNfY&quot;,&quot;-0PT7-_5y58&quot;,&quot;5tzT5Aa2w58&quot;,&quot;-s9m266PR3A&quot;,&quot;xTyZVhbQ2l8&quot;,&quot;xNZgiBLUqWA&quot;,&quot;60zr04WK_7k&quot;,&quot;2wQegUuMv-A&quot;,&quot;SKeHyxQMBlg&quot;,&quot;7_n560myhjA&quot;,&quot;88TdVV7swU4&quot;,&quot;wpqmuNaET48&quot;,&quot;FVym7WQTBCM&quot;,&quot;oOm1eMCiNbQ&quot;,&quot;cgS1FTromKY&quot;,&quot;gLITbNSHRQ8&quot;,&quot;P_rMQK5w8lY&quot;,&quot;boJKjmTK_lg&quot;,&quot;QkiOMJ0nO-0&quot;,&quot;Wu8YElT21fQ&quot;,&quot;jcRegawJ4DY&quot;,&quot;Q_OW_A5uyYo&quot;,&quot;QQNVmwHBC1Y&quot;,&quot;MgasuaHMZow&quot;,&quot;c9M2OSRrLbY&quot;,&quot;rs-blPkEmSc&quot;,&quot;8IXc5BmlGBc&quot;,&quot;yrjrb_wK0fg&quot;,&quot;JLxWvfUO2lM&quot;,&quot;t0QIsLg7kxM&quot;,&quot;DZFKdRVzymw&quot;,&quot;_S5Njfgm0GA&quot;,&quot;bcd5L_UHATo&quot;,&quot;fvwi4hKxTFU&quot;,&quot;GnSUGxgUT54&quot;,&quot;d0y3Q-00ZNA&quot;,&quot;XBDsnpsmTYs&quot;,&quot;RrL4OcobwYI&quot;,&quot;5zf76gHJGto&quot;,&quot;_NoLH86yO7k&quot;,&quot;ub2uWc_mndk&quot;,&quot;RUqSACHf-Qo&quot;,&quot;XaUHVOpXCuA&quot;,&quot;Lo7qvHIWICk&quot;,&quot;MHw4wQ44ZjY&quot;,&quot;__yMErSqfK0&quot;,&quot;4atX5oRvoTU&quot;,&quot;R2Qd9Vf40g4&quot;,&quot;2m2UFpaB8NY&quot;,&quot;GyE0Z_1A6_M&quot;,&quot;LWnbLpF3AlU&quot;,&quot;mYQTMJnO6hs&quot;,&quot;dRl8xPKoXlQ&quot;,&quot;UabkSkq5wUs&quot;,&quot;lZ9e_43F0Vw&quot;,&quot;SK4NaWuUUhM&quot;,&quot;H2CMnpmSH1Y&quot;,&quot;WeKMvlBuDgc&quot;,&quot;9Ta7PW8cDL4&quot;,&quot;CXRRwU5k3U8&quot;,&quot;dwAlC6zcvl4&quot;,&quot;MoKrxAWu5Wk&quot;,&quot;S7uoR1gVw_A&quot;,&quot;6_hpi9qSz_M&quot;,&quot;VmwiIZ7OV6Y&quot;,&quot;NOS4reuwl-o&quot;,&quot;CSrD1srzfWE&quot;,&quot;KRH33rHzeh8&quot;,&quot;F6MBzJF7mTo&quot;,&quot;IRSb4qBbaGQ&quot;,&quot;L7Z3O1vw6bo&quot;,&quot;h6bTtr9qMf4&quot;,&quot;MUlyzmxEZ4I&quot;,&quot;OM7tycgoZyE&quot;,&quot;kEgajhCjKVU&quot;,&quot;Py0_yYTs3i4&quot;,&quot;Nwrlzz5L9Zc&quot;,&quot;RNmLNxM1cQg&quot;,&quot;jgih4zIJJQ0&quot;,&quot;Sclpx3BN4TQ&quot;,&quot;rTIvHfYbw_8&quot;,&quot;yJQXTCXlaDY&quot;,&quot;tHTXjVR-KlQ&quot;,&quot;ASue7eEeaYU&quot;,&quot;KwNNFTAYgYU&quot;,&quot;FgYHaJlEIws&quot;,&quot;b3EDCuFDlX8&quot;,&quot;9U3CAcmJB5M&quot;,&quot;_Gfhivl4oxY&quot;,&quot;-7DDBHcU8sU&quot;,&quot;RzGxbeOeF_E&quot;,&quot;IAnpo_fWCFs&quot;,&quot;lJGnVjwhxn4&quot;,&quot;4UWXEhA2_lw&quot;,&quot;nQi44X0yky8&quot;,&quot;dl8JAi-oy2E&quot;,&quot;qhdxInl7FnM&quot;,&quot;mI1FPIzucvI&quot;,&quot;uCsPGI_fKLY&quot;,&quot;b-HqkyuD1bw&quot;,&quot;Pf34zP-r0Vw&quot;,&quot;203nO3CQx8E&quot;,&quot;VTBS73N9HAA&quot;,&quot;mYiS70eXi2Y&quot;,&quot;nL7DkuSzTME&quot;,&quot;8gYPuHs3a3w&quot;,&quot;-6clJ54425g&quot;,&quot;ENEt6YPP-bA&quot;,&quot;3dcub25B8vo&quot;,&quot;c0C2q4uC2lU&quot;,&quot;vP1XuZFnCuY&quot;,&quot;d8eQGh2hmZs&quot;,&quot;DnwVCpFUa8c&quot;,&quot;o13RQmWafQQ&quot;,&quot;Fzeq5q7fZec&quot;,&quot;Rc3BiJyptyQ&quot;,&quot;0MTZ_4TpeCs&quot;,&quot;NWAlGoRayI8&quot;,&quot;_CxnGtd5wRc&quot;,&quot;GsJ52VMmOTA&quot;,&quot;4xoPkMY9jTY&quot;,&quot;FbVZX4QpLt0&quot;,&quot;vR8nfv-nuRw&quot;,&quot;hPDjW_WDLjE&quot;,&quot;Xt-KS-7yxIY&quot;,&quot;Af2EbXntrNo&quot;,&quot;YcWjPXF61bw&quot;,&quot;REFb1N0IOTU&quot;,&quot;Xq7RGuyXHac&quot;,&quot;0ZNk6o4eQW0&quot;,&quot;ndBFMQ4cfVg&quot;,&quot;1g3BJOTOjdg&quot;,&quot;Vw1noAhipyU&quot;,&quot;CzRRqzh2rc8&quot;,&quot;8AlSU3uYgwE&quot;,&quot;Fm4Hwq3yIv8&quot;,&quot;ox43bEl6Zd8&quot;,&quot;pZiOS2hX984&quot;,&quot;gYOE1g9t6WA&quot;,&quot;lqQ_R0A1Sjk&quot;,&quot;Fkzh2BXYX4c&quot;,&quot;F3M1Afx-foY&quot;,&quot;IVnxLf4VwnM&quot;,&quot;C2hzcRh8A94&quot;,&quot;UX5fDO8-CQ8&quot;,&quot;XwX-DcngYV8&quot;,&quot;YBsWk-mxIo0&quot;,&quot;vgcLJVrRlEg&quot;,&quot;wnAddG_K7DI&quot;,&quot;j5uKfryafHA&quot;,&quot;wIiIbwASTqc&quot;,&quot;EhtwtkSvWyA&quot;,&quot;769WvedTtbw&quot;,&quot;GyVMfFetXsI&quot;,&quot;nyIKQ5D123Q&quot;,&quot;STjTk8jwoQw&quot;,&quot;wMPyviYwxWU&quot;,&quot;0bD6qoS2sz4&quot;,&quot;v2F-dCCB-jY&quot;,&quot;qPVkEm7apu0&quot;,&quot;ZlCQKTIT3xA&quot;,&quot;_00UwBZX9p8&quot;,&quot;9OpPtRH61SM&quot;,&quot;Lgsw-yPW7d4&quot;,&quot;RIkobdBlBZ4&quot;,&quot;Iq_pCB-Dl8w&quot;,&quot;SzxXJQxdO9c&quot;,&quot;dkpEcuOHcSA&quot;,&quot;N71fY05Lsxg&quot;,&quot;szOc2LWxQHY&quot;,&quot;73bKxGIHYrs&quot;,&quot;qWL_QRAAH38&quot;,&quot;dDzkglVA6o8&quot;,&quot;GRo09AmIMak&quot;,&quot;fby9mwcYdnY&quot;,&quot;qY_FxwvWA_o&quot;,&quot;oIU6UL-coG0&quot;,&quot;6BrtQYvRy4g&quot;,&quot;UjWFmAEA79A&quot;,&quot;MpPWOGB3FuA&quot;,&quot;nrg-D07wy1M&quot;,&quot;WswpDPrmVM4&quot;,&quot;tl24wXyIONo&quot;,&quot;iHSN9Y-Vf_8&quot;,&quot;KLNPjVbwb7Q&quot;,&quot;-ihJHRKhIFQ&quot;,&quot;nE4YbY0sNH8&quot;,&quot;mZpSx73ozao&quot;,&quot;X01cwva4g8Q&quot;,&quot;t0rBJ2gxk9g&quot;,&quot;pvD8gIIUkyM&quot;,&quot;-Iv9fO-q5-I&quot;,&quot;-__thIfjTO4&quot;,&quot;zQf51_qR0zY&quot;,&quot;J0U_Gmw7MaI&quot;,&quot;mEUAdBA8w0Q&quot;,&quot;NfFZMjGmWVc&quot;,&quot;Lil5_uWyFbY&quot;,&quot;ejtUgTgppwU&quot;,&quot;QGIUnYo4UpQ&quot;,&quot;ibTsY0YlW6g&quot;,&quot;lwbcUgwM5l8&quot;,&quot;nbnh_kdDBfw&quot;,&quot;ucElDXT1Ygs&quot;,&quot;XtG7KQuTcio&quot;,&quot;tYIo5ApR9Eg&quot;,&quot;ZuTtJotj-LI&quot;,&quot;Ws_qpfu4CD0&quot;,&quot;bMLtbEUngkg&quot;,&quot;D1WpvfHFt0Y&quot;,&quot;m9RqegSPQsg&quot;,&quot;mgJ5hiy0WKw&quot;,&quot;rtfJGm6Rml0&quot;,&quot;JEv9tyXOnnc&quot;,&quot;UYiHvh9E2pU&quot;,&quot;TyooQUmlcOA&quot;,&quot;dcVWjjfgguU&quot;,];

    var videoId = allVideos[Math.floor(Math.random()*allVideos.length)];
    iframe.src = 'https://www.youtube.com/embed/' + videoId + &quot;?autoplay=&quot; + autoplay;

}

nextVideo(0);

&lt;/script&gt;

&lt;form&gt;

&lt;button onclick=&quot;nextVideo(1);return false&quot;&gt;Click to play next random video&lt;/button&gt;

&lt;/form&gt;

&lt;h1 id=&quot;step-1-wikipedia-api&quot;&gt;Step 1: Wikipedia API&lt;/h1&gt;

&lt;p&gt;The first step in creating these videos was to get some actual freely available content. For this I chose to use Wikipedia. This can be accessed using JSON/REST, and to quickly hack this into place I decided to use a framework called ‘Unirest’. This makes the while prototype easy:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// API URI for the English Wikipedia&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGLISH_WIKIPEDIA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://en.wikipedia.org/w/api.php&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Using a 'search query', name of the page, retrieve the content:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPageContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnirestException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Example URI created for query 'Stack Overflow': https://en.wikipedia.org/w/api.php?format=json&amp;amp;action=query&amp;amp;prop=extracts&amp;amp;titles=Stack%20Overflow&amp;amp;redirects=true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unirest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENGLISH_WIKIPEDIA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prop&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;extracts&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;titles&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redirects&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;JSONObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagesObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJSONObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJSONObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pages&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagesObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagesObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htmlContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagesObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJSONObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;extract&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htmlContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The resulting JSON (see this &lt;a href=&quot;https://en.wikipedia.org/w/api.php?format=json&amp;amp;action=query&amp;amp;prop=extracts&amp;amp;titles=Stack%20Overflow&amp;amp;redirects=true&quot;&gt;example&lt;/a&gt;) contains the Wikipedia page in simple processed HTML. From this HTML I used a library called ‘Jsoup’ to extract the plain text. The first alinea of text contains the introduction of the topic, this is what I’ve decided to use as content for the video. Initially I had &lt;em&gt;all&lt;/em&gt; the content of the page in the videos, but they quickly turned out to be 30+ minutes long and very boring.&lt;/p&gt;

&lt;p&gt;This is the code I used to go from HTML to the first alinea of text:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Clean the HTML, get inner text of first alinea and break into sentences.
 * @param htmlContent
 * @return
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanAndBreakIntoSentences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htmlContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jsoup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htmlContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Elements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// All the text is contained in paragraph elements:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Break the text into sentences using the smart JDK 'BreakIterator':&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BreakIterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breakIterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BreakIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSentenceInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;US&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;breakIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breakIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breakIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BreakIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breakIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fullText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// If we reach a header, stop processing, we only need the first section/alinea:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;h2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// We break on the first (sub-) title:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;step-2-stunning-visuals-with-java-2d&quot;&gt;Step 2: Stunning visuals with Java 2D&lt;/h1&gt;

&lt;p&gt;We have some text, now how do we turn this into a video? We need visuals! I decided to cut the content into seperate lines, and for each line I have a single ‘slide’. This is an (buffered) image created using Java’s 2D API and saved to file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * For each sentence, create a buffered image and paint some text on this.
 * We need the text to be 'wrapped', for this I repurpose a JTextArea, on a JPanel.
 * 
 * Also increase the font size so the text fits on the screen.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;paintText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graphics2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JPanel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOpaque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dimension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1920&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVisible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;JTextArea&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JTextArea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dimension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1920&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFocusable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBorder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BorderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEmptyBorder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BORDER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BORDER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BORDER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BORDER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setWrapStyleWord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLineWrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOpaque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Increase the font size as long as it fits on screen (and don't go bigger than 100, looks ugly):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPreferredScrollableViewportSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fontSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Futura&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Futura&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Print this panel on the Graphics2D object (which is a BufferedImage)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;step-3-text-to-speech&quot;&gt;Step 3: Text-To-Speech&lt;/h1&gt;

&lt;p&gt;Instead of using a Java Text-To-Speech (TTS) library, which aren’t very clear or good, I decided to use the build-in OS/X command ‘say’.
On the command line you can execute: &lt;code class=&quot;highlighter-rouge&quot;&gt;say Hello world!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The ‘say’ command supports different voices and also has the ability to store the output in a file. Which is perfect for us!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// Execute the say command with a given filename, voice and sentence to speak:&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;say -o &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; -v &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; -r 210 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Wait for the say-command to finish&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;waitFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;step-4-putting-it-all-together&quot;&gt;Step 4: Putting it all together&lt;/h1&gt;

&lt;p&gt;What do we have now? A list of sentences from Wikipedia, for each sentence we have an image and we have an audio snippet created with TTS. Now it is time to put everything together and create a video.
The easiest way to do this is to use ffmpeg, a powerful command line video tool. To make this easier I created a small method ‘executeCommandLine’ which does the same thing as the snippet with ‘Runtime.getRuntime().exec’ shown above.&lt;/p&gt;

&lt;p&gt;Combine the image (png file) and the TTS audio (mp4 file) into a series of MPG files:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VikipediaSentence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFilename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Combine audio and image into a short video:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;executeCommandLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ffmpeg -loop 1 -y -i &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.png -i &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.mp4 -tune stillimage -shortest &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.mpg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We now have a series of small MPG files. They need to be combined into a single video. For this we need a text file which contains a list of all the MPG files. This is stored on disc and next we execute the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//merge all:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;executeCommandLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ffmpeg -f concat -safe 0 -i output/snippet_list.txt -c copy output/output.mpg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next we convert the video from one large MPG to MP4 file (which is a nicer, compressed format):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//convert to mp4:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;executeCommandLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ffmpeg -i output/output.mpg -c:v libx264 -c:a aac -strict experimental -b:a 192k -pix_fmt yuv420p -shortest output/output.mp4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And to add a little more ‘production value’ I’ve gone online and found some soothing (free, creative commons) background music. This music is looped into a large audio file of 50 minutes (enough for all videos). Again using ffmpeg the audio is mixed in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// add background music:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;executeCommandLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ffmpeg -i output/output.mp4 -i input/background_loop.mp3 -filter_complex amerge -c:v copy -c:a aac -strict experimental output/finaloutput.mp4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There it is, we have a complete video with text audio, text visuals and background music! Only one thing left to do, uploading to YouTube!&lt;/p&gt;

&lt;h1 id=&quot;step-5-uploading-everything-to-youtube&quot;&gt;Step 5: Uploading everything to YouTube&lt;/h1&gt;

&lt;p&gt;To automate the process of uploading, I first needed a place to put the videos, so I created a new YouTube channel named: &lt;a href=&quot;https://www.youtube.com/channel/UCSjEbLaNj1yKFgQpjLoqkUw&quot;&gt;Vikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we can use the Google YouTube Data API. It turns out this is &lt;em&gt;very&lt;/em&gt; easy and well documented. I don’t even need to share the code I wrote here because I used the example from Google’s website itself! Check out this &lt;a href=&quot;https://developers.google.com/youtube/v3/code_samples/java#upload_a_video&quot;&gt;amazing documentation&lt;/a&gt;. Very detailed and does exactly what I needed it to do.&lt;/p&gt;

&lt;p&gt;The example code takes a video file and uploads it. The only things I changed were setting the correct description, I was ready to generate all the content!&lt;/p&gt;

&lt;h1 id=&quot;not-implemented-yet&quot;&gt;Not implemented (yet?)&lt;/h1&gt;

&lt;p&gt;Things I wanted to implement (but didn’t and probably never will):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add a little color to the videos (black and white is boring)&lt;/li&gt;
  &lt;li&gt;Add &lt;a href=&quot;https://trac.ffmpeg.org/wiki/Waveform&quot;&gt;waveform&lt;/a&gt; from ffmpeg (just to keep it visually interesing)&lt;/li&gt;
  &lt;li&gt;Download (did this) and use (didn’t do this) the images from the Wikipedia page and add those to the video&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Yes, it is pretty easy to hack together a bot to create YouTube videos.&lt;/li&gt;
  &lt;li&gt;No, the quality isn’t &lt;em&gt;that&lt;/em&gt; good… yet?&lt;/li&gt;
  &lt;li&gt;Yes, it can be made in a single afternoon!&lt;/li&gt;
  &lt;li&gt;No, I’m not going to automate the spidering of Wikipedia and upload a million videos… (but I could easily do that!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Up to now all the videos created are based on a small list of ‘hot topics’ I found on Wikipedia and Twitter. I don’t want to automate the entire process and flood YouTube, the content just isn’t good enough for that. But it was a fun project for a lazy afternoon! I’ve learned a lot of new tricks, maybe you can benefit from that as well.&lt;/p&gt;

&lt;p&gt;The next thing I want to do with the 400+ YouTube videos I’ve generated is to see how (and if) people are going to watch them. Do they show up in the search results? Which topics are searched and watched? Maybe more on that in a future post!&lt;/p&gt;

&lt;p&gt;Do &lt;strong&gt;you&lt;/strong&gt; have any good ideas on how to generate videos, let me know in the &lt;strong&gt;comments&lt;/strong&gt;!
I’ve created a bot that generates music some years, maybe I should improve that bot to upload its own YouTube music videos? ;-)&lt;/p&gt;

</description>
        <pubDate>Mon, 30 Jan 2017 13:28:12 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2017/01/vikipedia-a-java-youtube-bot/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2017/01/vikipedia-a-java-youtube-bot/</guid>
        
        <category>Java</category>
        
        <category>Bot</category>
        
        <category>Wikipedia</category>
        
        <category>API</category>
        
        <category>Vikipedia</category>
        
        <category>ffmpeg</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Three new JEPs</title>
        <description>&lt;p&gt;This morning &lt;a href=&quot;https://twitter.com/mreinhold&quot;&gt;Mark Reinhold&lt;/a&gt; submitted three brand new JEPs (JDK Enhancement Proposal).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/300&quot;&gt;JEP 300&lt;/a&gt;: Augment Use-Site Variance with Declaration-Site Defaults&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/301&quot;&gt;JEP 301&lt;/a&gt;: Enhanced Enums&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/302&quot;&gt;JEP 302&lt;/a&gt;: Lambda Leftovers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These proposals are enhancements to the JDK (Java Development Kit) and OpenJDK. A long term roadmap for the JDK projects, a look into what the future of Java might hold.&lt;/p&gt;

&lt;p&gt;Let’s dive right in and take a quick look on what these proposals actually are!&lt;/p&gt;

&lt;h1 id=&quot;jep-300-augment-use-site-variance-with-declaration-site-defaults&quot;&gt;JEP 300: Augment Use-Site Variance with Declaration-Site Defaults&lt;/h1&gt;

&lt;p&gt;When you currently use Java Generics you probably already know about wildcards. It is possible to set lower and upper bounds to generics using the keywords &lt;strong&gt;? extends&lt;/strong&gt; and &lt;strong&gt;? super&lt;/strong&gt;. There are two parts to using wildcards, declaration side and use side, this JEP focusses mainly on making the use side easier and more powerful.&lt;/p&gt;

&lt;h2 id=&quot;declaration-side&quot;&gt;Declaration side&lt;/h2&gt;

&lt;p&gt;It is possible to set a bound with a wildcard on the declaration side:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shelter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example we’ve declared that the Shelter has to contain Animals. It is possible to create an Shelter&amp;lt;Cat&amp;gt; or Shelter&amp;lt;Dog&amp;gt; now, but not Shelter&amp;lt;Bike&amp;gt;.&lt;/p&gt;

&lt;h2 id=&quot;use-side&quot;&gt;Use side&lt;/h2&gt;

&lt;p&gt;The second way to use wildcards is on the &lt;em&gt;use&lt;/em&gt; side. There we can speak of so called &lt;strong&gt;in&lt;/strong&gt; and &lt;strong&gt;out&lt;/strong&gt;-variable wildcards.&lt;/p&gt;

&lt;p&gt;The following code uses the ‘extends’ keyword to create the &lt;strong&gt;in&lt;/strong&gt;-variable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Using extends we create an 'in' variable:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inAnimals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// From the inAnimals we can read: Animal (not subclasses)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- reading Animal is fine&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- compile error, we can't read Cat&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// We can write: nothing (!) making it almost read-only&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- compile error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is also the ‘super’ keyword (not very common) to create an &lt;strong&gt;out&lt;/strong&gt;-variable use side:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Using super we create an 'out' variable, setting an upper bound:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outAnimals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// From the outAnimals we can read: object (no superclasses!)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- compile error, illegal&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- we can only read object&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// On the write side, we've set a bound to Cat:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- correct!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- compile error&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- compile error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;so-what-is-jep-300&quot;&gt;So what is JEP 300?&lt;/h2&gt;

&lt;p&gt;The motivation of the JEP states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Since invariant uses of these type arguments are less flexible than their wildcard equivalents, while providing no extra power, a reasonable practice is to always use a wildcard when mentioning the type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is almost always more powerful and equivalent to use wildcards on the use side. The problem is that this is verbose and adds a lot of noise to your code. The proposal wants to make it possible to declare (at the declaration side) what the default wildcard strategy should be.&lt;/p&gt;

&lt;p&gt;For example look at the following code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contravariant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;covariant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// other possible syntaxes are Function&amp;lt;-T, +R&amp;gt; or Function&amp;lt;in T, out R&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler can now automatically treat every use of the type e.g., Function&amp;lt;String, Number&amp;gt; as if it had wildcards Function&amp;lt;? super String, ? extends Number&amp;gt;.&lt;/p&gt;

&lt;p&gt;On the use side the proposal says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rather than making changes to subtyping, we preprocess the source code so that types like Function&amp;lt;String, Number&amp;gt; are implicitly expanded to Function&amp;lt;? super String, ? extends Number&amp;gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This should make it more powerful and just as readable to using wildcards by default without even noticing them.&lt;/p&gt;

&lt;h1 id=&quot;jep-301-enhanced-enums&quot;&gt;JEP 301: Enhanced Enums&lt;/h1&gt;

&lt;p&gt;The next proposal Mark has submitted is about using Enums with Generics. Look at the following example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;BELLA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bella&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BUDDY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Buddy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIGGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tigger&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have an enum with three pets. These pets have an instance of an animal inside them. And we have a way of retrieving them.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BELLA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints: &quot;Bella&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But one thing we can’t do it call the method “.bark()” on BELLA, because we don’t know this is a Dog.&lt;/p&gt;

&lt;p&gt;The proposal JEP 301 wants to make it possible to correlate a specific type to an enum constant:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;BELLA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bella&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BUDDY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Buddy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIGGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tigger&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Having coupled the Dog type to enum BELLA it should now we possible to call:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BELLA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// WOOF!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TIGGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;purr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Purrrrrrrrr.....&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;jep-302-lambda-leftovers&quot;&gt;JEP 302: Lambda Leftovers&lt;/h1&gt;

&lt;p&gt;This is turning out to be a rather long blogpost but we’ve reached the final proposed JEP of the day: &lt;strong&gt;Lambda Leftovers&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;accidental-ambiguities&quot;&gt;Accidental ambiguities&lt;/h2&gt;

&lt;p&gt;One of the problems people are having with the lambdas at the moment, and this JEP wants to improve, are accidental ambiguities.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- compile error&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Ambiguous method call. Both:
 * apply (Predicate&amp;lt;Animal&amp;gt;)        in classname and
 * apply (Function&amp;lt;Animal, String&amp;gt;) in classname match
 */&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why are we having this problem? Both methods are possible candidates of the lambda. If we look further and see the return type ‘boolean’ it should be clear we wanted to call the Predicate method and not the Function (which should return a String). Right now this doesn’t work, but it is something the compiler could figure out for us.&lt;/p&gt;

&lt;h2 id=&quot;underscores&quot;&gt;Underscores&lt;/h2&gt;

&lt;p&gt;Up to Java 8 it was perfectly acceptable to use the underscore character ‘_’ as a variable name. But this has been changed, all leading up to JEP 302. In most languages with lambda’s it is possible to denote certain inputs as &lt;em&gt;unused&lt;/em&gt;. This is done using the underscore. In Java this causes problems because it is right now a valid variable name.&lt;/p&gt;

&lt;p&gt;Starting with Java 8 the use of an underscore as lambda argument caused a warning and from Java 9 the use of an underscore became an error. This allows future Java versions beyond 9 to be able to use the underscore for other purposes. And one of those purposes is to bring it back as a default variable name. Not causing collisions if used multiple times and it can’t be used as variable by calling _.toString() for example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Ignore the second parameter, just use i:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BiFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Even possible, ignore both:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BiFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;someString&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;shadowing-of-parameters&quot;&gt;Shadowing of parameters&lt;/h2&gt;

&lt;p&gt;Another small change that is proposed is allowing to shadow parameters. For example look at the following code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computeSomeKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeIfAbsent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// compile error, key already defined&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeIfAbsent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// compile error, can't redefine key inside this scope&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In both cases ‘key’ is already defined, can’t be used as a parameter or local variable inside the lambda. The proposal wants to lift this restriction, allowing the use of ‘key’ as a parameter or as a local inside the lambda using so called ‘shadowing’.&lt;/p&gt;

&lt;p&gt;One possible drawback is readability, and I too think that this might be a problem.
For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;theInitialKey&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeIfAbsent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;theShadowKey&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- delete this&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second variable “theShadowKey” is taking the place of the first “theInitialKey”. This can be quite confusing because if you delete the second declaration nothing would break. The other variable would come from the shadows and take its place. This feels dangerous and confusing to me, not very ‘Java’-like.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Another day, three new JEPs submitted. Java is moving forward and trying to improve the user experience with genetics and lambdas. These proposals look like good, small, low-impact improvements that can really benefit the common programmer.&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Dec 2016 07:28:12 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2016/12/three-new-jeps/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/12/three-new-jeps/</guid>
        
        <category>JEP</category>
        
        <category>Java</category>
        
        <category>Enhancement</category>
        
        <category>Proposal</category>
        
        <category>Reinhold</category>
        
        <category>OpenJDK</category>
        
        <category>JDK</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Excuse me, sorry to interrupt...</title>
        <description>&lt;p&gt;Interruptions are a software developers worst nightmare. This is what you often hear. There is nothing worse than being interrupted while working hard on a problem, while you’re in &lt;em&gt;the zone&lt;/em&gt;. You’ll lose your train of thought and the world collapses.&lt;/p&gt;

&lt;p&gt;The idea is that in software development you are sometimes very deep into a problem, analysing code:&lt;/p&gt;

&lt;p&gt;This orchestrator calls that service, it is managed by this class and talks to that queue. So this generator has these parameters and it all depends on… “&lt;strong&gt;hey&lt;/strong&gt; &lt;em&gt;I still need your time sheet&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rage.gif&quot; alt=&quot;Rage&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Poof&lt;/strong&gt;… everything gone. Your mind is now filled with rage and lost the entire train of thought. This is the main reason programmers hate interruptions.&lt;/p&gt;

&lt;h1 id=&quot;root-cause-analysis&quot;&gt;Root cause analysis&lt;/h1&gt;

&lt;p&gt;During the &lt;a href=&quot;https://www.oracle.com/javaone/&quot;&gt;JavaOne&lt;/a&gt; 2016 conference I attended a talk by Holly Cummins called &lt;em&gt;“Euphoria Despite the Despair”&lt;/em&gt;. In this talk she went in depth into what makes work &lt;strong&gt;fun&lt;/strong&gt; and stressed the point that interruptions should be &lt;strong&gt;avoided&lt;/strong&gt; &lt;em&gt;at all cost&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;She even talked about a team that has a dedicated duo that had ‘interruption duty’. A Slack-bot was created so you could ask which colleagues you could interrupt each day.&lt;/p&gt;

&lt;p&gt;But… are we judging too quickly here? Are &lt;strong&gt;all&lt;/strong&gt; interruptions bad? I don’t think they are. Time to dig a little bit deeper.&lt;/p&gt;

&lt;h1 id=&quot;sync-versus-async-and-good-versus-bad&quot;&gt;Sync versus async and good versus bad&lt;/h1&gt;

&lt;p&gt;Interruptions are synchronous and blocking. Someone walks up to you and stands near your desk trying to get your attention. You might have a few milliseconds to finish what you are doing but you’ll need to reply. Other forms of communication are asynchronous, for example mail or chat clients (Slack). Someone asks a question and when you have the time to reply, you reply.&lt;/p&gt;

&lt;p&gt;Our team has evolved to use this to our advantage. Some problems ask for &lt;strong&gt;direct&lt;/strong&gt; action, but &lt;em&gt;most&lt;/em&gt; can be handled &lt;strong&gt;asynchronous&lt;/strong&gt;. This is something we talk about and discuss.&lt;/p&gt;

&lt;p&gt;For example: If my manager wants a time sheet? Ask me asynchronous, it can wait. If a colleague has a question but is able to do other things first? Ask asynchronous, it can wait. If a colleague is &lt;em&gt;stuck&lt;/em&gt; and can’t continue to work? I’d be happy to drop what I’m doing and assist! This is what teams do, they work together and communicate!&lt;/p&gt;

&lt;p&gt;Don’t throw all interruptions on one big pile and label them as bad, distinguish between the &lt;strong&gt;good&lt;/strong&gt; and &lt;strong&gt;bad&lt;/strong&gt; interruptions.&lt;/p&gt;

&lt;h1 id=&quot;mount-the-headphones-get-in-the-zone&quot;&gt;Mount the headphones, get in the zone&lt;/h1&gt;

&lt;p&gt;Sometimes, as a programmer, you just want to concentrate and solve some deep problem alone.&lt;/p&gt;

&lt;p&gt;In our team this can be done in two ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Work at &lt;strong&gt;home&lt;/strong&gt; or in a small &lt;strong&gt;dedicated room&lt;/strong&gt; in our office&lt;/li&gt;
  &lt;li&gt;Put on your &lt;strong&gt;headphones&lt;/strong&gt;, if they are on, you signal you don’t want to be disturbed&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I do this too, mostly using my headphones. Most of the time I don’t even have music playing and I can hear everything the team says (this is important, more on this below!).&lt;/p&gt;

&lt;p&gt;In my opinion though we need to &lt;strong&gt;rethink&lt;/strong&gt; this. Is it really the &lt;em&gt;best&lt;/em&gt; way to program when you are ‘in the zone’?&lt;/p&gt;

&lt;p&gt;I think you are much more likely to solve problems when you openly &lt;strong&gt;share&lt;/strong&gt; and &lt;strong&gt;collaborate&lt;/strong&gt;. Pairing isn’t just for trivial work, instead: the trivial things are things you should do alone! Teams should have no secrets, at each point in time you should have a pretty good idea what each of your team buddies is working on. Actively ask questions, even trivial things.&lt;/p&gt;

&lt;h1 id=&quot;near-subliminal-team-updates&quot;&gt;Near-subliminal team updates&lt;/h1&gt;

&lt;p&gt;What? “Near-subliminal” team updates? Yes, I’m so sorry, I can’t think of a better name. Can you? &lt;strong&gt;Please tell me&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;One thing that is very important in software development is the use of what I’ve just called near-subliminal team updates/mumblings. It is the main reason I have headphones on without any music, and why I don’t like working at different locations (at home or in cubicles).&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;You are working on something and you feel the need to refactor a class. At this moment you say/mumble out loud:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Hey team, I’m going to refactor &lt;strong&gt;classname&lt;/strong&gt; because &lt;strong&gt;reason&lt;/strong&gt; okay?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is what I call a near-subliminal team update, and they are &lt;em&gt;very&lt;/em&gt; important. They can solve a lot of problems!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Maybe you &lt;strong&gt;don’t&lt;/strong&gt; agree with &lt;strong&gt;reason&lt;/strong&gt;, this is the perfect time to talk about that. You don’t want to wait until a code review and tell them it was a bad idea later the same day.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Maybe you are also working on something in &lt;strong&gt;classname&lt;/strong&gt; and it might collide with your work. You don’t want to wait until you &lt;em&gt;git pull&lt;/em&gt; and need to merge, tackle it right away!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Maybe it &lt;strong&gt;isn’t&lt;/strong&gt; relevant to you at all (which is most of the time)… Well, most likely you don’t even really notice the update. It didn’t contain any trigger words. Terms you are working on or have an opinion about. You aren’t really interrupted and can continue to work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;To summerize:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Don’t treat all interruptions as &lt;strong&gt;evil&lt;/strong&gt;, they are not…&lt;/li&gt;
  &lt;li&gt;If you are annoyed about interrupts, &lt;strong&gt;talk&lt;/strong&gt; about it&lt;/li&gt;
  &lt;li&gt;Speak up, mumble, use those near-submliminal team updates!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Did I miss anything? How do you cope or deal with interruptions?&lt;/p&gt;

&lt;p&gt;And &lt;strong&gt;please&lt;/strong&gt;: If there is someone with a &lt;strong&gt;better name&lt;/strong&gt; for these short near-subliminal status updates, let me know!&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Oct 2016 10:28:12 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2016/10/excuse-me-sorry-to-interrupt/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/10/excuse-me-sorry-to-interrupt/</guid>
        
        <category>interruptions</category>
        
        <category>agile</category>
        
        <category>scrum</category>
        
        <category>holdup</category>
        
        <category>interrupt</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>JavaOne 2016, the Future of Java EE</title>
        <description>&lt;p&gt;Lately there has been a lot of rumor going around about the future of Java EE. Oracle ex-employees &lt;a href=&quot;https://twitter.com/reza_rahman&quot;&gt;Reza Rahman&lt;/a&gt; was one of the first to voice their concern about Java EE. It seemed that all development on the seperate JSRs (Java Specification Requests) that make up Java EE 8 ground to a halt and Oracle was thinking about stopping Java EE development all together.&lt;/p&gt;

&lt;p&gt;Oracle finally gave some insight on their proposal of the future of Java EE during &lt;a href=&quot;https://www.oracle.com/javaone/index.html&quot;&gt;JavaOne&lt;/a&gt; 2016 (where I am right now).&lt;/p&gt;

&lt;h1 id=&quot;what-is-java-ee&quot;&gt;What is Java EE?&lt;/h1&gt;

&lt;p&gt;First, lets take a step back and look at what Java EE actually is. If you download Java SDK/JRE you are able to compile classes and run them. In the language (java.* and javax.*) there are a couple of libraries that you can use. For example if you want to compute mathematical equations there are classes to use in the java.math.* package.&lt;/p&gt;

&lt;p&gt;Oracle quickly realized it is hard to make larger enterprise applications using just these libraries. That is why they developed the following things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A set of interfaces (API) for Enterprise Applications (Java EE)&lt;/li&gt;
  &lt;li&gt;A default server &lt;em&gt;implemention&lt;/em&gt; for these API’s (Glassfish)&lt;/li&gt;
  &lt;li&gt;A licensing structure for vendors that want to implement these API’s&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So if you want to make an Java EE application you can use the Java EE API. For example you can define Servlets for web communication. Next when you deploy this application on an official licensed Java EE server it’ll make sure the methods are implemented and called when a URL is invoked.&lt;/p&gt;

&lt;h1 id=&quot;java-ee-at-javaone-2016&quot;&gt;Java EE at &lt;a href=&quot;https://www.oracle.com/javaone/index.html&quot;&gt;JavaOne&lt;/a&gt; 2016&lt;/h1&gt;

&lt;p&gt;During the keynote Oracle informed the crowd about Java EE 8. Rumor was that Oracle wanted to completely stop developing Java EE because the demand has been decreasing over the years. More and more ‘fat’-jar applications are being deployed on simple web servers that don’t implement the full Java EE specification. Oracle has to think about the return value, is the effort of developing a new Java EE 8 specification worth the effort? They clearly thought it wasn’t.&lt;/p&gt;

&lt;p&gt;The problem for Oracle was the big backlash coming from the community. A couple of initiatives were started to create a voice and support for Java EE (for example the Java EE Guardians and EE Central). This put Oracle in a bad position. If they stopped developing Java EE the community would be very dissapointed. The initiatives would demand the rights to the API to keep developing it themselfs. But Oracle can’t do this because they are earning money from selling licenses.&lt;/p&gt;

&lt;p&gt;The decision has been made to continue developing Java EE 8. And during the keynote they proposed a release of EE 8 in 2017. Going forward they’re talking about changing the focus to reflect ‘modern’ enterprise development. They want to add support for virtualization (Docker anyone?) and microservices, modernizing Java EE.&lt;/p&gt;

&lt;h1 id=&quot;my-thoughts&quot;&gt;My thoughts&lt;/h1&gt;

&lt;p&gt;Parts of Java EE, for example CDI and JPA are in my opinion very succesful. Java EE looked at the options in the market and they’ve defined a new, clearer, general, evolved API that allows you to change the underlaying technology/vendor. This is very good! It is always valuable when vendors get together and define a shared API together based on the lessons learned from their own implementations.&lt;/p&gt;

&lt;p&gt;The problem is that Java EE 8 as a whole is too large, it is a monolith. If I start a new project I’d love to pick some parts from Java EE and just use those. There is no need to have one huge Java EE certified server if instead you can pick one particular CDI and JPA implementation.&lt;/p&gt;

&lt;p&gt;The future of Java EE isn’t to continue as one big bundled EE server. We need to break it up. All the parts can have their own lifecycle and seperate implementations. This makes it easier to get smaller certified implementations and doesn’t require large EE servers. This also allows for pruning, if certain parts aren’t relevant anymore, don’t use it and stop developing.&lt;/p&gt;

&lt;p&gt;Vendors like Red Hat (owner of WildFly) are already breaking up their Java EE implementation using frameworks like &lt;a href=&quot;http://wildfly-swarm.io/&quot;&gt;WildFly Swarm&lt;/a&gt;. Swarm allows you to package and run just the parts of the specification you’re using. This is, what I think, the real future of enterprise Java.&lt;/p&gt;

</description>
        <pubDate>Sun, 18 Sep 2016 19:45:12 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2016/09/the-future-of-java-ee/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/09/the-future-of-java-ee/</guid>
        
        <category>java ee</category>
        
        <category>enterprise</category>
        
        <category>future</category>
        
        <category>javaone</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Job titles when writing code</title>
        <description>&lt;p&gt;The company I work for (&lt;a href=&quot;https://www.jpoint.nl/&quot;&gt;JPoint&lt;/a&gt;) we don’t have work titles. Well, we do, but you’re free to pick one. Some people call themselfs ‘software developer’, some are having more luck as ‘software architect’, others label themselfs as ‘software craftsman’ and there might be a ‘software ninja/rockstar’ hanging around.&lt;/p&gt;

&lt;p&gt;But I have a problem with that… all those terms don’t reflect on what we do. Currently I’m sitting in a session at &lt;a href=&quot;https://www.oracle.com/javaone/index.html&quot;&gt;JavaOne&lt;/a&gt; and I’m having the feeling people don’t realize what their job actually is.&lt;/p&gt;

&lt;p&gt;#So, what does a software coder do?#&lt;/p&gt;

&lt;p&gt;When creating software &lt;em&gt;we instruct a computer what to do&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That is it.&lt;/p&gt;

&lt;p&gt;We tell a machine how to respond. We don’t build things (develop), we don’t slay things (ninja!), we don’t rock, we just tell the computer what to do.&lt;/p&gt;

&lt;p&gt;That is why a programming language is called… a &lt;strong&gt;language&lt;/strong&gt;. It is a way we, as coders, communicate with the computer.&lt;/p&gt;

&lt;p&gt;Is it that simple? Sadly no.&lt;/p&gt;

&lt;p&gt;When writing code, we are not alone. There are also other coders that read/write/edit/analyse our code. It isn’t enough that just you and the machine understand, other coders have to understand as well.&lt;/p&gt;

&lt;p&gt;We started out programming in binary, but this was way too complicated for humans. So we invented programming languages. First we created assembly. This made it easier for a human to tell the machine what to do. But assembly was still too complicated. Slowly the programming languages became closer and closer to human language.&lt;/p&gt;

&lt;p&gt;#Alternatives#&lt;/p&gt;

&lt;p&gt;My job is to write code, code that the machine understands. The code must also be pleasant to read and understand by other humans. Also, in this, I’m putting a lot of creativity.&lt;/p&gt;

&lt;p&gt;Maybe you are a &lt;strong&gt;software author&lt;/strong&gt; or &lt;strong&gt;software writer&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wri•ter (rahy-ter)

noun
1. a person engaged in writing (books, articles, stories, etc.) as an occupation or profession; an author or journalist.
2. a person who commits his or her thoughts, ideas, etc., to writing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This fits our job much better!&lt;/p&gt;

&lt;p&gt;If you want something more exotic, and your code has a good flow and shows creativity, you might call yourself a: &lt;strong&gt;software poet&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;po•et (ˈpoʊ ɪt)

noun
1. one who writes poetry.
2. one who displays imagination and sensitivity along with eloquent expression.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sat, 17 Sep 2016 19:45:12 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2016/09/job-titles-when-writing-code/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/09/job-titles-when-writing-code/</guid>
        
        <category>programming</category>
        
        <category>software poet</category>
        
        <category>software ninja</category>
        
        <category>language</category>
        
        <category>communication</category>
        
        
        <category>Programming</category>
        
      </item>
    
  </channel>
</rss>
