<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>royvanrijn</title>
    <description>Java, algorithms, math, science and more!</description>
    <link>http://royvanrijn.com/</link>
    <atom:link href="http://royvanrijn.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 09 Dec 2015 14:23:57 +0100</pubDate>
    <lastBuildDate>Wed, 09 Dec 2015 14:23:57 +0100</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>If you want to build software...</title>
        <description>&lt;p&gt;Yesterday I heard a great quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you want to build a ship, don’t drum up people to collect wood and don’t assign them tasks and work, but rather teach them to long for the endless immensity of the sea. &lt;strong&gt;-Antoine de Saint-Exupery&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;to-the-moon&quot;&gt;To the moon&lt;/h1&gt;

&lt;p&gt;The modern version of this quote might be: Think about the people who helped build the Saturn rockets that took us to the moon with the Apollo missions. They didn’t work on those projects because it was their job and people payed them to do it. They didn’t just follow tasks. They worked on the project because they loved to be part of this amazing voyage. Every single NASA employee is &lt;strong&gt;in love with space&lt;/strong&gt; and space exploration and they do their absolute best to be part of it.&lt;/p&gt;

&lt;h1 id=&quot;software-development&quot;&gt;Software development&lt;/h1&gt;

&lt;p&gt;This should be the same for (Agile) software development:&lt;br /&gt;
Don’t hire programmers and give them tasks, tell them about what you want to achieve! Enthusiasm is contagious, it is the perfect catalyst to boost productivity. When people are hired to do tasks, they do the tasks, nothing more, nothing less. When people are hired to reach for a certain goal they’ll express creativity and ingenuity. They will suggest improvements and you’ll end up with a much (MUCH) better product.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Dec 2015 09:17:02 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2015/12/if-you-want-to-build-software/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2015/12/if-you-want-to-build-software/</guid>
        
        
        <category>Agile</category>
        
      </item>
    
      <item>
        <title>The most discriminating JUG in the world</title>
        <description>&lt;p&gt;About a week ago I was talking to a colleague about the lack of female Java programmers, especially here in Western Europe. We came to this topic after hearing that at &lt;a href=&quot;http://devoxx.ma/en/&quot;&gt;Devoxx Morocco&lt;/a&gt; almost &lt;strong&gt;a third&lt;/strong&gt; of the attendees was female, great news! The conclusion? Some of my friends are running the most discriminating JUG in the world.&lt;/p&gt;

&lt;p&gt;Here, in the Netherlands, we have just two big JUG’s (Java User Groups). There is the &lt;a href=&quot;http://www.nljug.org/&quot;&gt;NLJUG&lt;/a&gt;, which covers the entire country and organises the J-Fall conference amongst other things, almost all Java coders in the Netherlands are a member. There is also &lt;a href=&quot;http://jduchess.org/&quot;&gt;JDuchess&lt;/a&gt;, the female JUG. They organise meetings with fellow female coders and help them to connect with other (female) coders around the globe, they also hold regular meetups, also internationally at conferences and they are doing an awesome job hosting several Devoxx4Kids events per year. The JDuchess have been awarded (rightly so) multiple times for their effort in bringing more gender equality in the Java world.&lt;/p&gt;

&lt;h1 id=&quot;but&quot;&gt;But….&lt;/h1&gt;

&lt;p&gt;When you think about that… surprisingly, JDuchess is &lt;strong&gt;the most discriminating&lt;/strong&gt; JUG in the world! Of all the JUGs I know, it is the only one I’ll never be allowed to join (unless I undergo a sex-change perhaps). It is the only JUG in the world that is filtering members based on gender. And in my opinion, that is a problem.&lt;/p&gt;

&lt;p&gt;So, why is this a problem? It is just a group of female coders that want to hang out and help each other! Well, first of all, don’t get me wrong. Again, I love what the JDuchess are doing for the Java community, I know some of them pretty well personally and they are all very nice and have the best intention!&lt;/p&gt;

&lt;p&gt;But… if you feel like you are not welcome in your local JUG as female coder and you want to do something about this. Please don’t start a ‘female only’-JUG, start a JUG where &lt;strong&gt;everyone&lt;/strong&gt; is welcome and like-minded! If you want to have more equality and integration you shouldn’t be organising your own discriminating group. We need to have male and female coders to work together to solve the gender equality problems!&lt;/p&gt;

&lt;p&gt;Also, I must mention: JDuchess was never about equality or discrimination. It wasn’t born out of frustration as mentioned above. It was just a way for female coders (who often felt lonely during conferences) to connect and have more ‘female-oriented’ conversations with each other.&lt;/p&gt;

&lt;h1 id=&quot;jduke-the-jug-of-testosterone&quot;&gt;JDuke, the JUG of testosterone&lt;/h1&gt;

&lt;p&gt;Imagine this, someone starts JDuke: the male only JUG! We do cool meetings, share experiences with other men! On conferences we proudly wear our male-only badge, because we are MEN! Next to attending sessions and giving talks at conferences we also have our own meetups, just for men of course, and we all go out for dinner, together. Everybody is welcome at our JUG, as long as you have a … are a dude.&lt;/p&gt;

&lt;p&gt;The world would probably explode, how dare we do something so discriminating? But remember, this is exactly what the JDuchess have been doing all the time. Except, what they do isn’t questioned, it is applauded instead. Probably because they are (still) a minority?&lt;/p&gt;

&lt;h1 id=&quot;so-you-are-jealous&quot;&gt;So… you are jealous?&lt;/h1&gt;

&lt;p&gt;Yes! I want to join &lt;a href=&quot;http://jduchess.org/&quot;&gt;JDuchess&lt;/a&gt; too! If I was a female I would totally love being part of their JUG.&lt;/p&gt;

&lt;p&gt;But, as a male, I too want to share experiences with everyone, I too want to discuss the topic of equality. There should be no need in the world for a female JUG (which apparently there still is)! All the JUGs should be as open and inviting as the JDuchess, I’ve never seen a JUG so active and welcoming as them. They are an example for other JUGs… except their discriminating admission policy of course. Gender should not matter, it is all about having mutually shared interest.&lt;/p&gt;

</description>
        <pubDate>Mon, 30 Nov 2015 14:12:35 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2015/11/the-most-discriminating-jug-in-the-world/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2015/11/the-most-discriminating-jug-in-the-world/</guid>
        
        <category>discrimination</category>
        
        <category>feminism</category>
        
        <category>Java Programming</category>
        
        <category>jduchess</category>
        
        <category>jug</category>
        
        
        <category>Java Programming</category>
        
        <category>Other</category>
        
      </item>
    
      <item>
        <title>JavaOne 2015 and Devoxx 2015</title>
        <description>&lt;p&gt;The last couple of weeks have been really busy for me. I’ve been to San Francisco for JavaOne 2015 (the official Java conference). After that I had just a week to recover and travelled to Antwerp in Belgium for Devoxx 2015 (the largest community driven conference).&lt;/p&gt;

&lt;h1 id=&quot;talking&quot;&gt;Talking&lt;/h1&gt;

&lt;p&gt;At both conferences I had the pleasure to talk about different subjects. From fun/informal Ignite sessions about &lt;a href=&quot;https://en.wikipedia.org/wiki/Skynet_%28Terminator%29&quot;&gt;Skynet&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Joggling&quot;&gt;Joggling&lt;/a&gt; to hosting a Java Pub Quiz and a live-coding introduction to JShell the new REPL (read-eval-print loop) that will be available in Java 9.&lt;/p&gt;

&lt;p&gt;Here is a video of the live-coding session:&lt;/p&gt;

&lt;iframe id=&quot;ytplayer&quot; type=&quot;text/html&quot; width=&quot;640&quot; height=&quot;390&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot; src=&quot;http://www.youtube.com/embed/CN3tGi4eZZ4&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;youtube&quot;&gt;YouTube&lt;/h1&gt;

&lt;p&gt;One major announcement at Devoxx 2015 is that Stephan Janssen (Devoxx organizer/godfather) will stop with Parleys. Instead all the talks will be freely available on the &lt;a href=&quot;https://www.youtube.com/channel/UCCBVCTuk6uJrN3iFV_3vurg&quot;&gt;Devoxx 2015 YouTube channel&lt;/a&gt;. This brings all the excellent content from the conference to the entire community, for free!&lt;/p&gt;

&lt;p&gt;If you are curious on how this video is recorded and what Devoxx looks like behind the scenes, check out the Devoxx Live video I made with Stephan Janssen:&lt;/p&gt;

&lt;iframe id=&quot;ytplayer&quot; type=&quot;text/html&quot; width=&quot;640&quot; height=&quot;390&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot; src=&quot;http://www.youtube.com/embed/SWnYWqXpNl4&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Devoxx Live is a new concept, instead of just providing all the talks we want to show you the other side of Devoxx: the hallway. This is where you meet people, talk to the sponsors, experience things like &lt;a href=&quot;https://www.youtube.com/watch?v=WI0v4AMdrPo&quot;&gt;drone racing&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=UCyAXxhAiCI&quot;&gt;hoverboard/monowheeling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;JavaOne has also posted a lot of sessions to YouTube, but instead of cutting everything into nice little videos they’ve decided to upload just the raw streams of the entire day. Luckely there is always ‘the community’, in this case, the people over at reddit created a nice list with video-deeplinks to the appropriate talks: &lt;a href=&quot;https://www.reddit.com/r/java/comments/3requx/javaone_2015_sessions/&quot;&gt;JavaOne 2015 talks on reddit&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;keynotes&quot;&gt;Keynotes&lt;/h1&gt;

&lt;p&gt;The first keynote at JavaOne wasn’t very interesting, most conferences just want to sell it to sponsors and don’t have any good content. The second keynote at JavaOne was the ‘community keynote’. During a theatrical play Stephen Chin took us back in time (and into the future) to keep Duke from destroying San Francisco. It was entertaining, but could really use a better screenwriter (that ending, *sigh*), but it did have a powerfull message: teaching and children are the future. This was also pretty visible at JavaOne4Kids (where I did a session with my colleagues), during this event hundreds of kids got introduced to programming and robotics.&lt;/p&gt;

&lt;p&gt;The keynotes at Devoxx were (IMHO) much better, during the first keynote we heard Mark Reinhold talk about project Jigsaw and after that one of my heroes took the stage: professor Lawrance Krauss. Instead of focussing on the last 20 years of Java (which all conferences do) we took a step back and looked at the origins of our universe and life. He talked about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Large_Hadron_Collider&quot;&gt;Large Hadron Collider (LHC)&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Gravitational-wave_observatory&quot;&gt;gravitational wave observatories&lt;/a&gt;. The closing keynote at Devoxx was done by Stephen Chin and included a lot of video footage from an interview he’s done with James Gosling (the father of Java), this was fun too!&lt;/p&gt;

&lt;h1 id=&quot;best-sessions&quot;&gt;Best sessions&lt;/h1&gt;

&lt;p&gt;If you’ve seen the top 10-list of highest votes at Devoxx 2015 there is one name you can’t mention: Venkat Subramaniam. He brings live-coding to a new level, all of his talks are entertaining and interesting. The top 4 talks bore his name three times.&lt;/p&gt;

&lt;p&gt;Another thing I really enjoyed was the series of talks by Mark Reinhold/Alan Bateman (and at JavaOne also Alex Buckley) on the Jigsaw project. If you want to spend just an hour learning about this topic, I highy suggest watching: &lt;a href=&quot;https://www.youtube.com/watch?v=SU1WFX8yeKM&quot;&gt;Advanced Modular Development&lt;/a&gt;. This talk covers everything you’ll need to know once Java 9 is released and you’re going to use it.&lt;/p&gt;

&lt;h1 id=&quot;random-remarks&quot;&gt;Random remarks&lt;/h1&gt;

&lt;p&gt;JavaOne: This was the first time I’ve been there since Oracle aquired Sun. I really enjoyed the conference although the Hilton &amp;amp; Parc 55 location isn’t as convenient as Moscone.&lt;/p&gt;

&lt;p&gt;JavaOne: I really liked having Duke’s Café to talk to all of my conference-buddies. Also: If you ever see someone alone at a conference, walk there and say hello. Being at such a huge conference can (surprisingly) be a very lonely experience. Most programmers aren’t very outgoing, me included, but I’ve started forcing myself to talk to people that look like other introverts that might be lonely. I’ve never had a bad experience talking to people, only fun times!&lt;/p&gt;

&lt;p&gt;Devoxx: It is (for me) the best Java conference in the world, the quality of the talks was very high again. The atmosphere was awesome. And I’m not just saying this because I volunteer during the conference :-)&lt;/p&gt;

</description>
        <pubDate>Mon, 16 Nov 2015 14:41:38 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2015/11/javaone-2015-and-devoxx-2015/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2015/11/javaone-2015-and-devoxx-2015/</guid>
        
        <category>conference</category>
        
        <category>devoxx</category>
        
        <category>devoxx 2015</category>
        
        <category>javaone</category>
        
        <category>javaone 2015</category>
        
        
        <category>Devoxx</category>
        
        <category>Java Programming</category>
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Microservices: Creationism versus Evolutionism</title>
        <description>&lt;p&gt;This morning a friend (&lt;a href=&quot;https://twitter.com/vgrgic/status/598791639784660994&quot;&gt;@vgrgic&lt;/a&gt;) tweeted the following quote from Martin Fowler:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“So if you can keep your system simple enough to avoid the need for microservices: do.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is absolutely true I think, microservices are far from the silver bullet some people want you to believe. They do have a place in software architecture obviously, but there is always a ‘it depends’.&lt;/p&gt;

&lt;h1 id=&quot;creationists&quot;&gt;Creationists&lt;/h1&gt;

&lt;p&gt;A lot of microservices ‘experts’ I’ve met are creationists. When they start designing an application (the last two years), they break the requirements down into pieces. Once they start coding they instantly create small services and connect them. But in my experience, this has a major drawback. When doing this, you’ll need to make quite a lot of assumptions upfront on what the future of the service will hold and how it will grow. Once you’ve created small services they have very strong boundaries, those boundaries really dictate and limit how your application can and will grow. This can work well, only if all your assumptions turn out to be true, but really, how often does that happen?&lt;/p&gt;

&lt;h1 id=&quot;evolutionists&quot;&gt;Evolutionists&lt;/h1&gt;

&lt;p&gt;I’ve labelled myself as a design evolutionist. Always &lt;strong&gt;start&lt;/strong&gt; with a monolith. Properly separate the concerns in your code, keep it really clean and tidy. Always be aware of what each piece of code does and if it belongs where you just wrote it. In the best scenario, you’ll end up with a simple, well build, working monolith! This is also what Martin Fowler describes in his piece on &lt;a href=&quot;http://martinfowler.com/bliki/MicroservicePremium.html&quot;&gt;MicroservicePremium&lt;/a&gt;. There is a point where the monolith becomes a burden to manage. Once you reach that point, and you’ve payed proper attention to the separation of concerns, it should be trivial to cut loose a well defined microservice from your code.&lt;/p&gt;

&lt;h1 id=&quot;rant-about-the-hype&quot;&gt;Rant about the hype&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; The following paragraph is full of nonsense.&lt;/p&gt;

&lt;p&gt;Until recently I couldn’t understand the microservices hype. Why is it suddenly this popular? But recently I’ve seen the light. I now know &lt;em&gt;why&lt;/em&gt; so many people like it. Microservices has a wide appeal for many wrong reasons.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Architects (like me) like it because it solves one kind of problem really well, managing and maintaining a huge application.&lt;/li&gt;
  &lt;li&gt;The DevOps community likes it because they have a lot &lt;strong&gt;to do&lt;/strong&gt; when you have heaps of services.&lt;/li&gt;
  &lt;li&gt;Large &lt;strong&gt;SOA/ESB&lt;/strong&gt; companies like it, they almost went bankrupt and out of fashion, but now they can &lt;strong&gt;sell&lt;/strong&gt; their crappy tooling again as it ‘enables microservices’.&lt;/li&gt;
  &lt;li&gt;The OSGi community likes it, they too can use the term microservices to sell &lt;strong&gt;OSGi&lt;/strong&gt; tooling and knowledge.&lt;/li&gt;
  &lt;li&gt;Application servers like it because they can create tooling to enable microservices.&lt;/li&gt;
  &lt;li&gt;Monitoring companies found a new gap in the market, they can now sell microservices monitoring tools…&lt;/li&gt;
  &lt;li&gt;Etc etc et &lt;em&gt;fucking&lt;/em&gt; cetera!&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 14 May 2015 12:43:00 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2015/05/microservices-creationism-versus-evolutionism/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2015/05/microservices-creationism-versus-evolutionism/</guid>
        
        <category>architecture</category>
        
        <category>microservices</category>
        
        
        <category>Agile</category>
        
        <category>Java Programming</category>
        
      </item>
    
      <item>
        <title>Stop the conference committees?</title>
        <description>&lt;p&gt;In this post I’ll try to convince you that all the conferences are doing it wrong. &lt;a href=&quot;https://www.oracle.com/javaone/index.html&quot;&gt;JavaOne&lt;/a&gt;, &lt;a href=&quot;http://www.devoxx.be&quot;&gt;Devoxx&lt;/a&gt;, and all other conferences should stop using conference program committees to select their speakers, there is a much better way.&lt;/p&gt;

&lt;h1 id=&quot;call-for-papers&quot;&gt;Call for Papers&lt;/h1&gt;

&lt;p&gt;Some of you know I enjoy speaking in public and I’ve done so at many conferences. To get selected to speak at a conference you’ll need to supply a ‘paper’ to the Call for Papers (CfP). In this paper you outline the content of your talk and provide some information about yourself as speaker.&lt;/p&gt;

&lt;p&gt;Once all these papers are submitted some people from the community will look at all the proposals and they have the daunting task of selecting the right ones. This is very hard to do, I know this for a fact since I’ve been on several program committees, for example for &lt;a href=&quot;http://www.nljug.org/jfall/2014/&quot;&gt;J-Fall&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-honor-from-hell&quot;&gt;The honor from hell&lt;/h1&gt;

&lt;p&gt;When I got asked to be on a program committee it felt like a real honor and a lot of fun. But in reality it is a painstaking task! You’ll get a lot of papers to review, sometimes up to or over a hundred. And you have to rate them, all of them! Once you are halfway through you can’t really give an honest rating compared to the first papers you’ve reviewed, plainly because you’ve seen too much and can’t remember most of them. There is something very wrong about this system.&lt;/p&gt;

&lt;h1 id=&quot;bias&quot;&gt;Bias&lt;/h1&gt;

&lt;p&gt;Another popular topic these days is gender bias. Until recently in IT a lot of these program committees were dominated by males. Research has shown that an all-male committee is much more likely to pick male speakers than female speakers for example. This is why currently most conferences try to pick a committee that is as mixed as possible. But is that really solving the problem?&lt;/p&gt;

&lt;h1 id=&quot;flooding&quot;&gt;Flooding&lt;/h1&gt;

&lt;p&gt;A third problem is the flooding. Some people have found out that submitting papers has a bit of chance/luck to it. If you write down the right words people will fall in love with it and you get picked. So instead of submitting one paper, they’ll just submit five or even ten papers, sometimes about the same topic but with other buzzwords. This actually improves their chances of getting in instead of getting a penalty!&lt;/p&gt;

&lt;h1 id=&quot;telescope-time-assignment&quot;&gt;Telescope Time assignment&lt;/h1&gt;

&lt;p&gt;This brings me to a Numberphile YouTube video called: &lt;a href=&quot;https://www.youtube.com/watch?v=7c0CoXFApnM&quot;&gt;Telescope Time without Tears&lt;/a&gt;. It turns out they had exactly the same problems we’re facing with program committees. There are only a couple of powerful telescopes in the world and a lot more researchers that want to get time on these telescopes. So previously they had selection committees and call for papers. They ran into exactly the same problems as outlined above, so they came up with a much better way to do this.&lt;/p&gt;

&lt;h1 id=&quot;the-solution-distributed-peer-review&quot;&gt;The solution: distributed peer review&lt;/h1&gt;

&lt;p&gt;I’ll try to explain what the Telescope committee did to solve their problems, but I really suggest you take a look at the video first. It explains everything much better than I possibly can.&lt;/p&gt;

&lt;p&gt;Their idea is simple, if you submit a paper, you’ll receive a number of papers in return to review, for example six other papers. This is really what peer-reviewing is about, getting reviewed by actual peers. This instantly solves the problem of flooding, if you submit five papers, you’ll receive thirty (!) papers to review, a real penalty.&lt;/p&gt;

&lt;p&gt;This way of reviewing is also much more fair, more people will vote and they only have to rate six papers each. So, now I know what you are thinking: this can’t be right, we can game this method! For example, if I see a paper that is a lot like my own paper, but better… I give it a very poor rating. There is a solution for that as well. You can do this of course, but only you will do this, others will still give it a fair higher rating. This information can then be used to give a penalty to your own submitted paper. On the other hand, if your scoring is much like other voters, you’ve done a fair and good job, your paper gets a small bonus. So people are motivated to really take a good look at the few papers they need to rank.&lt;/p&gt;

&lt;p&gt;I really like the idea of getting rid of program committees, for some reason it is always feels like there is this group of in-crowd people and they have the tendency to pick friends and colleagues, the same speakers as always. I’m not blaming them, I’m sometimes part of that too! We don’t do it on purpose, it happens automatically! It is the system that is flawed.&lt;/p&gt;

&lt;p&gt;So, for the next JavaOne, Devoxx or J-Fall, instead of selecting a committee and giving them the painstaking task of rating all the papers… maybe we should try distributed peer reviews? It just sounds like a much better approach.&lt;/p&gt;

&lt;h1 id=&quot;sources&quot;&gt;Sources&lt;/h1&gt;

&lt;p&gt;The main YouTube video: &lt;a href=&quot;https://youtu.be/7c0CoXFApnM&quot;&gt;Telescope Time without Tears - Numberphile&lt;/a&gt;&lt;br /&gt;
The ‘extra footage’ YouTube video with more details: &lt;a href=&quot;https://youtu.be/bplncn4xC74&quot;&gt;Telescope Time (extra footage) - Deep Sky Videos&lt;/a&gt;&lt;br /&gt;
The actual research paper (containing the electoral theory): &lt;a href=&quot;http://arxiv.org/pdf/0906.1943.pdf&quot;&gt;Telescope time without tears – a distributed approach to peer review&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 12 May 2015 21:20:55 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2015/05/stop-the-conference-committees/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2015/05/stop-the-conference-committees/</guid>
        
        <category>committee</category>
        
        <category>conference</category>
        
        <category>electoral</category>
        
        <category>papers</category>
        
        <category>telescope</category>
        
        
        <category>Devoxx</category>
        
        <category>Programming</category>
        
        <category>Science</category>
        
      </item>
    
      <item>
        <title>The science behind &#39;Unknown Pleasures&#39;</title>
        <description>&lt;h1 id=&quot;joy-division&quot;&gt;Joy Division&lt;/h1&gt;

&lt;p&gt;The album cover of &lt;a href=&quot;http://en.wikipedia.org/wiki/Unknown_Pleasures&quot;&gt;Unknown Pleasures&lt;/a&gt; by Joy Division has to be one of the most iconic covers of the 70’s/early 80’s:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/Unknown-Pleasures-Joy-Division-1024x1023.jpg&quot;&gt;&lt;img src=&quot;/images/Unknown-Pleasures-Joy-Division-1024x1023-300x300.jpg&quot; alt=&quot;Unknown-Pleasures-Joy-Division-1024x1023&quot; class=&quot;aligncenter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The artwork has been re-used and reprinted a lot and is still abundantly present as T-shirt at most music festivals.&lt;/p&gt;

&lt;p&gt;But every time I saw this image I wondered… what do those white lines actually represent (if anything)? It turns out the story behind the white lines makes the artwork much cooler!&lt;/p&gt;

&lt;h1 id=&quot;psr-b191921&quot;&gt;PSR B1919+21&lt;/h1&gt;

&lt;p&gt;At Cambridge University in 1967 a 24 year old student named Jocelyn Bell was analysing a huge printout from a radio telescope. This telescope was built by Anthony Hewish and his group of students to look for quasars. Quasars are the dense centers of super massive blackholes, they emit lots of radio waves and visible light. During the analysis Jocelyn noticed something strange, there appeared to be a signal repeating very quickly, at about 1.337 seconds. Surely this had to be some interference from earth, because this isn’t something a quasar could produce.&lt;/p&gt;

&lt;p&gt;After some research they could rule out a lot of earth-noise, microwaves, French radio signals, police radio and much more. They found out the signal also didn’t follow ‘earth time’, the normal 24 hours we follow, but rather the &lt;a href=&quot;http://en.wikipedia.org/wiki/Sidereal_time&quot;&gt;sidereal time&lt;/a&gt; (star time). In short, when they pointed the telescope to the object again (after earth had rotated) it would be in the same position after 23.9344699 hours. This is a key indicator the signal didn’t come from earth but rather from deep space. Nothing they had previously seen or read about in space could produce such a signal. Jokingly they initially named the signal ‘LGM1’, short for ‘Little Green Men #1’.&lt;/p&gt;

&lt;p&gt;The discovery sparked interest from all over the world, and a year later (1968) scientists had come to the conclusion the signal had to come from something called a &lt;a href=&quot;http://en.wikipedia.org/wiki/Neutron_star&quot;&gt;neutron star&lt;/a&gt;. When a star (larger than our sun) collapses it explodes (this is called a supernova), expelling a lot of material into space. This material, stardust, is literally what we are made of! No other process known in space can produce ‘heavy’ elements like iron, nikkel, gold, silver and platinum. Initially people thought this exploding star didn’t have a ‘corpse’ and all matter was blown into space.&lt;/p&gt;

&lt;p&gt;In 1934 however, just a year after the neutron was discovered two scientists named Walter Baade and Fritz Zwicky predicted the existance of a neutron star. When large stars collapse they expel stardust but also leave behind a dense neutron star. This star, made of super heavy material, spins around producing radio waves. This is what we now call a &lt;a href=&quot;http://en.wikipedia.org/wiki/Pulsar&quot;&gt;pulsar&lt;/a&gt;. The signal from Bell and Hewish was the first observed pulsar, now named PSR B1919+21.&lt;/p&gt;

&lt;h1 id=&quot;cambridge-encyclopedia&quot;&gt;Cambridge Encyclopedia&lt;/h1&gt;

&lt;p&gt;If we look at the Cambridge Encyclopedia of Astronomy there is a page on the discovered pulsar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cp1919-joy-division-300x246.jpg&quot; alt=&quot;cp1919-joy-division&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The image on the left page is the same as the album cover, it is the signal of our pulsar: &lt;a href=&quot;http://en.wikipedia.org/wiki/PSR_B1919%2B21&quot;&gt;PSR B1919+21&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 16 Feb 2015 09:13:36 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2015/02/the-science-behind-unknown-pleasures/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2015/02/the-science-behind-unknown-pleasures/</guid>
        
        <category>album art</category>
        
        <category>cover</category>
        
        <category>cp1919</category>
        
        <category>joy division</category>
        
        <category>lgm1</category>
        
        <category>pulsar</category>
        
        
        <category>Science</category>
        
      </item>
    
      <item>
        <title>Paper sizes</title>
        <description>&lt;h1 id=&quot;two-standards&quot;&gt;Two standards&lt;/h1&gt;

&lt;p&gt;Yes, this blogpost is about paper. This has absolutely nothing to do with programming, but there is a beautiful piece of math involved.&lt;/p&gt;

&lt;p&gt;There are two major standards of paper sizes in the world. The most widely used is &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_216&quot;&gt;ISO-216&lt;/a&gt;, more commonly known as the A-series, as in ‘A4’ size. This system is used almost everywhere in the world, the main exceptions are United States and Canada. In the United States they use their own &lt;a href=&quot;http://en.wikipedia.org/wiki/Letter_%28paper_size%29&quot;&gt;US Letter&lt;/a&gt; standard.&lt;/p&gt;

&lt;h1 id=&quot;us-letter&quot;&gt;US Letter&lt;/h1&gt;

&lt;p&gt;The standard US Letter has a size of: 216 mm x 279 mm (8.5 by 11 inches) and a ratio of 1,291666666666667.&lt;br /&gt;
(I’ll explain why this ratio is important in the math part below!).&lt;/p&gt;

&lt;p&gt;The origin of this size is very vague and lost in history. Most origins say (from Wikipedia):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The 11” length of the standard paper being about a quarter of “the average maximum stretch of an experienced vatman’s arms.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically US Letter is a standard because it is a standard, don’t ask questions, just deal with it.&lt;/p&gt;

&lt;h1 id=&quot;iso-216-the-a-standard&quot;&gt;ISO-216, the A-standard&lt;/h1&gt;

&lt;p&gt;The letter size of the ISO standard is A4. The size is 210 mm × 297 mm and has a ratio of √2 (math!).&lt;/p&gt;

&lt;p&gt;The ratio is what makes this standard superior. This of course isn’t a coincidence. Smart people have thought about these sizes, it became a standard because it was superior. The ‘magic’ property A4 paper size has is that is consists of exactly two A5 papers side-by-side. In turn, two of these A4 papers make up the larger A3 paper. This makes it very easy for example to make a booklet in A5 format consisting of folded A4 papers. Also if you scale up a document in A5 it’ll exactly fit A4. If you want to use a copier and print two A5 pages on A4 paper, go ahead! This is impossible to do with US Letter, you’ll end up with white spaces or stretched documents!&lt;/p&gt;

&lt;h2 id=&quot;aspect-ratio-math&quot;&gt;Aspect ratio math&lt;/h2&gt;

&lt;p&gt;How does this work mathematically? The magic hides in the fact that 2 / √2 = √2. Imagine we have a piece of paper with long side A and short side B. If we fold the long side and create a new paper size with B and C, what is the aspect ratio?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Given:
A/B = √2 (aspect ratio)
C = A/2 (new short length is A folded in half)

So what is the new aspect ratio of B/C?
B/C = B/(A/2)

B/(A/2) = 2/(A/B)

2/(A/B) = 2/√2

2/√2 = √2!&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When you start with the aspect ratio of √2, the resulting folded aspect ratio is again √2. You can keep doing this.&lt;/p&gt;

&lt;p&gt;Lets take the largest standard paper size, A0: 841 × 1189. What happens when we fold it? Well: 841 becomes the long side, 1189/2=594.5 the short side. This is indeed the A1 paper size (594 mm x 841 mm). It will keep the magic √2 aspect ratio!&lt;/p&gt;

&lt;h2 id=&quot;size-of-a0-paper&quot;&gt;Size of A0 paper&lt;/h2&gt;

&lt;p&gt;Now that we can explain the aspect ratio, we still don’t know how we ended up with the magic numbers 210 mm × 297 mm. This number originates simply because the A0 paper size is defined as having an aspect ratio of √2 and a surface area of 1 m2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is all you need to know, √2 and 1m2.&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Given:
A*B = 1m2 = 1000² (our paper size)
A/B = √2 (our ratio)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first formula we need is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;area = (diagonal²) / (ratio + (1/ratio))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;When we plug in the given values:
1000² = (diagonal²) / (√2 + (1/√2))

diagonal² = (√2 + (1/√2)) × 1000² ≅ 2121320.34

Remember our magic aspect ratio: 
A / B = √2:
B = A × √2

With our old pal Pythagoras we now know:
diagonal² = A² + B² (= 2121320.34)

Let&amp;#39;s get rid of B²:
diagonal² = A² + (A * √2)²

Now we can simplify:
diagonal² = A² + (A × √2)²
diagonal² = A² + 2 × A²
diagonal² = 3 × A²

And easily calculate the result:
3 × A² = 2121320.34

A = √(2121320.34 / 3) ≅ 840.89
B = A × √2 ≅ 1189.20&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We started with just two simple numbers, ratio: √2 and area: 1m2 and now we’ve ended up with the A0 paper, 841 mm and 1189 mm!&lt;br /&gt;
To calculate the rest of the A-series you just take:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;A&amp;#39; = B / 2
B&amp;#39; = A&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Mathematically folding it in half results in: 594 mm x 841 mm = exactly the A1 paper size!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reference_iso_paper_size-300x226.jpg&quot; alt=&quot;reference_iso_paper_size&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;keep-on-folding&quot;&gt;Keep on folding&lt;/h1&gt;

&lt;p&gt;When we take an A4 paper and keep folding it, we get the following aspects (aspects fluctuate a little bit due to rounding):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;A4	210 mm × 297 mm ratio: 1.414
A5	148 mm × 210 mm ratio: 1.419
A6	105 mm × 148 mm ratio: 1.409
A7	74  mm × 105 mm ratio: 1.418
A8	52  mm × 74  mm ratio: 1.423
A9	37  mm × 52  mm ratio: 1.405
A10	26  mm × 37  mm ratio: 1.423&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But what do you end up with folding the US Letter? Let’s see:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;216 mm x 279 mm ratio: 1.291
139 mm x 216 mm ratio: 1.554 &amp;lt;- What?
108 mm x 139 mm ratio: 1.287 &amp;lt;- Ah..
69  mm x 108 mm ratio: 1.565 &amp;lt;- HUH!?
54  mm x 69  mm ratio: 1.278
34  mm x 54  mm ratio: 1.588
27  mm x 34  mm ratio: 1.259 &amp;lt;- Oh god...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This fluctuating ratio results in so much wasted space, ink, paper! And it is just ugly! If you decide to scale something up from A5 to A4 it instantly fits, if you scale something in US Letter… you’ll either have to crop or stretch or leave unprinted paper.&lt;/p&gt;

&lt;p&gt;US Letter is bad for the environment!&lt;/p&gt;

&lt;p&gt;Ban the US Letter standard, &lt;strong&gt;hurray for math&lt;/strong&gt;!&lt;/p&gt;

</description>
        <pubDate>Wed, 11 Feb 2015 14:00:25 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2015/02/paper-sizes/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2015/02/paper-sizes/</guid>
        
        <category>a4</category>
        
        <category>iso216</category>
        
        <category>math</category>
        
        <category>paper</category>
        
        <category>size</category>
        
        
        <category>Math</category>
        
        <category>Science</category>
        
      </item>
    
      <item>
        <title>Shaved FAQ</title>
        <description>&lt;p&gt;&lt;strong&gt;What happened to your beard?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I shaved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you lost a bet?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who are you? How did you get past security?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The same guy as last week and the months before that, I shaved, sorry to shock you, it happens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why did you grow a beard in the first place?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because I felt like it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why did you shave?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Same reason I decided to grow a beard, I felt like it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But why this Sunday?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stop it, I shaved, it isn’t special, most men do it a couple of times a week, get over it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It looks much better this way!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for the compliment, don’t get to attached, the beard will probably return.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You look so much younger!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’m not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It looks much worse without a beard!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why do people comment so much on facial hair, I’m not judging your hair/clothing/weight etc.&lt;/p&gt;

&lt;p&gt;Anyway, to quote The Dude Lebowski: &lt;em&gt;Yeah, well that’s just your opinion, man.&lt;/em&gt;&lt;br /&gt;
(I’m trying to follow the philosophy and lifestyle of &lt;a href=&quot;http://www.dudeism.com&quot;&gt;dudeism&lt;/a&gt;)&lt;/p&gt;

</description>
        <pubDate>Mon, 09 Feb 2015 09:48:26 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2015/02/shaved-faq/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2015/02/shaved-faq/</guid>
        
        <category>beard</category>
        
        <category>dudeism</category>
        
        <category>faq</category>
        
        <category>shave</category>
        
        <category>shaved</category>
        
        
        <category>Other</category>
        
      </item>
    
      <item>
        <title>Kids amplify your life</title>
        <description>&lt;p&gt;Three years ago my life was pretty normal, I had a house, a wife, a car and a decent job. Everything was nice and easy, very mundane. And then, my daughter was born.&lt;/p&gt;

&lt;h1 id=&quot;impact-of-kids&quot;&gt;Impact of kids&lt;/h1&gt;

&lt;p&gt;Every parent will tell you two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After having kids your life as you knew it… gone&lt;/li&gt;
  &lt;li&gt;But the life you have afterwards, is much more satisfying!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I didn’t have kids and I heard people say this I thought they were just making it sound better than it was. But now I know, it is true.&lt;/p&gt;

&lt;p&gt;The thing they never tell you is &lt;strong&gt;*WHY*&lt;/strong&gt; their life is better now, and I think I have the answer.&lt;/p&gt;

&lt;h1 id=&quot;ups-and-downs&quot;&gt;Ups and downs&lt;/h1&gt;

&lt;p&gt;In life you need ups and downs. If you have a life where you have all the money in the world and no set backs… it can still be a boring non-satisfying life. Also, I’ve seen people losing their job and they still rate their life as pretty satisfying. It all depends on your frame of reference! If you only have ups, it is dull, you need those mood swings.&lt;/p&gt;

&lt;p&gt;When I didn’t have kids, these things made me happy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Heard a good joke in the coffee corner&lt;/li&gt;
  &lt;li&gt;Won a volleyball match&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the worst things that happened to me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Missing a train…&lt;/li&gt;
  &lt;li&gt;Running out of coffee&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is pretty much it, again: very mundane and a bit dull.&lt;/p&gt;

&lt;h1 id=&quot;kids-amplify-your-life&quot;&gt;Kids amplify your life&lt;/h1&gt;

&lt;p&gt;Once I’ve had kids, all the things above seem nuances. This is what my ups and downs now look like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Downs&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Was an hour late at work because kid was screaming: “Today, no pants!”&lt;/li&gt;
  &lt;li&gt;The daily *catch me* kick in the nuts&lt;/li&gt;
  &lt;li&gt;Kid broke something valuable, again&lt;/li&gt;
  &lt;li&gt;Constant fear of kids getting hurt, disappointed etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, the obvious *I have kids* &lt;strong&gt;ups!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kid walks/talks/does something for the first time&lt;/li&gt;
  &lt;li&gt;Good night kisses&lt;/li&gt;
  &lt;li&gt;“Daddy! I’ve missed you!” after being gone for an hour&lt;/li&gt;
  &lt;li&gt;Many more moments…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kids cause greater daily downs and thankfully also bigger up moments, they amplify your feelings and make you feel alive!&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Dec 2014 16:38:25 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2014/12/kids-amplify-your-life/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2014/12/kids-amplify-your-life/</guid>
        
        <category>downs</category>
        
        <category>feelings</category>
        
        <category>kids</category>
        
        <category>ups</category>
        
        
        <category>Other</category>
        
      </item>
    
      <item>
        <title>Stop the Rot, the Rules of Refactoring</title>
        <description>&lt;p&gt;A lot of times you hear experienced programmers talking about ‘smelly’ code. These ‘code smells’ are things that just look or feel wrong. Often programmers don’t immediately have a clear idea on how to fix it, but it ‘smells’! These smells often happen when the code ‘rots’.&lt;/p&gt;

&lt;p&gt;Let’s do a quick check:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Are there pieces of code you’d rather not change?&lt;/li&gt;
  &lt;li&gt;Are (parts of) the application sometimes scrapped and rebuild from scratch (over and over)?&lt;/li&gt;
  &lt;li&gt;Do pieces of code exist that turned out much more complex than you had initially imagined?&lt;/li&gt;
  &lt;li&gt;Do you have pieces of code that feel out of place?&lt;/li&gt;
  &lt;li&gt;Is it hard to break up some large classes and/or methods?&lt;/li&gt;
  &lt;li&gt;Do you have a hard time coming up with names for certain classes?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’ve answered yes to one or more questions, you are probably suffering from code smells and maybe even advanced code rot.&lt;/p&gt;

&lt;h1 id=&quot;what-is-a-code-smell&quot;&gt;What is a code smell?&lt;/h1&gt;

&lt;p&gt;Most of the time a piece of code has a smell when the design underneath is wrong. Often this is not visible at first, but slowly appears when the component gets larger. Classes get too large, methods are hard to break up, some classes or methods feel out of place. Even simple things as struggling with naming a new class is a sign there is something wrong. All of this are code smells and experienced programmers have developed a nose for this. Most of the time this is a sign there is a larger problem. It isn’t something a bit of code can fix, there is probably something wrong in the design. Is this component doing the right thing? Does it have the right responsibilities? Take a step back and look at the complete picture. What problem are these classes/methods trying to solve?&lt;/p&gt;

&lt;h1 id=&quot;what-is-code-rot&quot;&gt;What is code rot?&lt;/h1&gt;

&lt;p&gt;When code smells, more often than not, people will continue working on it, adding functionality. Maybe they don’t notice the smell or they don’t take the much needed step back to investigate the problem. This leads to faster code rot. So what exactly is code rot you might ask? Every piece of code starts to ‘rot’ the moment it is written. Eventually the code needs to be replaced and becomes too difficult to maintain. Hopefully this happens in the far future, 20-30 years from now. Unfortunately this is often not the case, there are parts being rebuild and scrapped while the application is being developed.&lt;/p&gt;

&lt;p&gt;Each time new code is written, added or changed, the new code starts out as rotten as the code that it depends on. This can cause, with a tiny bit of rotten/smelly code, for an entire application to be trashed! It is highly infectious.&lt;/p&gt;

&lt;h1 id=&quot;and-the-answer-is-refactoring&quot;&gt;And the answer is… refactoring!&lt;/h1&gt;

&lt;p&gt;Refactoring is the magic word here, but… it sounds easier than it actually is. At first people will deny there is a problem, sometimes they don’t see it, they don’t share your disgust. Eventually it’ll continue to rot and more people will notice the smell. And once this smell has become unbearable drastic measures seem to be needed. This brings us to rule #1 about code smell:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Refactor early, refactor often.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The sooner you refactor and remove some rotten code, the less likely it is to spread and the easier it is to remove. Don’t seek for approval, do something about it. But remember, take a step back first. Sometimes you are rewriting a piece of code, and the result is just as bad as before. The reason is that a design flaw is lurking in the shadows. If the responsibilities between two components is wrong you can scrap a piece of code and rebuild it, but the same problems will keep surfacing. So lets make this rule #2:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Before refactoring, take a step back, eliminate possible design flaws.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You’ve taken a step back, looked at the complete picture, fixed the responsibilities, time to do the refactoring! No!! There is a third *very* important rule. Refactoring means changing a piece of code without changing its behavior. How do we do this? We write tests! Only if you have proper testing in place you can start thinking about refactoring. How else will you be certain that a piece of code still has the same behavior as before?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Only refactor when you have proper tests.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you follow these three simple rules, nothing can go wrong. You’re detecting and fixing code smells early and often, you’ll stop the rot as soon as possible to make sure it doesn’t spread, keeping the application healthy. There isn’t a possible design flaw hiding in the shadows, we’ve taken a step back and eliminated that. And finally: We have tests in place that ensure we don’t change any behavior that was painstakingly added to the rotting code.&lt;/p&gt;

&lt;p&gt;If you follow these rules you’ll end up with code that is readable, easier to maintain, easy to change (agile code!).&lt;/p&gt;

&lt;p&gt;In short: &lt;strong&gt;Healthy code!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Dec 2014 13:31:22 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2014/12/stop-the-rot-the-rules-of-refactoring/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2014/12/stop-the-rot-the-rules-of-refactoring/</guid>
        
        <category>code rot</category>
        
        <category>code smell</category>
        
        <category>design</category>
        
        <category>refactoring</category>
        
        <category>testing</category>
        
        
        <category>Java Programming</category>
        
        <category>Programming</category>
        
      </item>
    
  </channel>
</rss>
