<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>royvanrijn</title>
    <description>Java, algorithms, math, science and more!</description>
    <link>http://royvanrijn.com/</link>
    <atom:link href="http://royvanrijn.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 12 Sep 2018 16:58:22 +0200</pubDate>
    <lastBuildDate>Wed, 12 Sep 2018 16:58:22 +0200</lastBuildDate>
    <generator>Jekyll v3.7.0</generator>
    
      <item>
        <title>Monero mining using Docker</title>
        <description>&lt;p&gt;Bitcoin mining was profitable, for a short while. I once mined over 100 coins (at the time not worth even a single dollar).
At the time of writing this I have about 4 BTC left, and these coins are now worth over 25k dollar.&lt;/p&gt;

&lt;p&gt;Times have changed though, mining Bitcoin on your PC is no longer an option. First CPU miners were replaced by GPU miners and later specialized cryptocurrency mining hardware (ASICs) replaced them. Now you’ll need to create a big farm with cooling, cheap electricity etc to stay profitable.&lt;/p&gt;

&lt;h1 id=&quot;introducing-monero&quot;&gt;Introducing: Monero&lt;/h1&gt;

&lt;p&gt;It is still possible to get into cryptocurrency with your regular hardware though, but you’ll have to mine different currencies.&lt;/p&gt;

&lt;p&gt;The best one at the moment is probably: &lt;strong&gt;Monero&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This cryptocurrency has been created to be easier on the CPU, harder on a GPU.&lt;/p&gt;

&lt;h1 id=&quot;the-easy-way-docker&quot;&gt;The easy way: Docker&lt;/h1&gt;

&lt;p&gt;Do you want to start mining Monero coins too?&lt;/p&gt;

&lt;p&gt;The easiest way is to fire up a Docker image like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run kannix/monero-miner -a cryptonight -o stratum+tcp://pool.supportxmr.com:3333 -u 45i78dDNEqES45Te6vHmh6XJQTHsEc3Kk5T9CTSfmvhv7sckTNxSF1pJGoNesLdqwd9rG6DwxRYr8HtuK2m9mTaLQRCdCFu -p worker_name&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;sup&gt;(of course: replace the address with your own address, unless you want to support me)&lt;/sup&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Sep 2018 12:24:13 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2018/09/monero-mining/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2018/09/monero-mining/</guid>
        
        <category>Cryptocurrency</category>
        
        <category>Monero</category>
        
        <category>Docker</category>
        
        
        <category>Bitcoin</category>
        
      </item>
    
      <item>
        <title>Part 2: OpenJ9 versus HotSpot</title>
        <description>&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Yesterday I compared different JDK versions and &lt;a href=&quot;https://www.eclipse.org/openj9/&quot;&gt;OpenJ9&lt;/a&gt; versus &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136373.html&quot;&gt;HotSpot&lt;/a&gt; on &lt;strong&gt;memory&lt;/strong&gt; and &lt;strong&gt;speed&lt;/strong&gt;. The memory part of the test was realistic if you ask me, an actual working Spring Boot application that served REST objects.&lt;/p&gt;

&lt;p&gt;The speed/CPU test however was… lacking. Sorting some random arrays, just one specific test.&lt;/p&gt;

&lt;p&gt;Today I decided to test OpenJ9 and HotSpot a bit more using an actual benchmark: &lt;strong&gt;SPECjvm2008&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;specjvm2008&quot;&gt;SPECjvm2008&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.spec.org&quot;&gt;SPEC&lt;/a&gt; (Standard Performance Evaluation Corporation) has a couple of well defined benchmarks and tests, including an old JVM benchmark called &lt;strong&gt;SPECjvm2008&lt;/strong&gt;. This is an elaborate benchmark testing things like compression, compiling, XML parsing and much more. I decided to download this and give it a spin versus OpenJ9 and HotSpot. This should be a much fairer comparison.&lt;/p&gt;

&lt;p&gt;Initially I encountered some issues, some of the tests didn’t work against Java 8 and the tests wouldn’t even start against Java 9+. But eventually I got it working by excluding a couple of benchmarks with the following parameters:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPECjvm2008&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;helloworld&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compiler&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rsa&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signverify&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mpegaudio&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fft&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lu&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;monte_carlo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sparse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sunflow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compiler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rsa&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signverify&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derby&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpegaudio&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;large&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;large&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;large&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;large&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;monte_carlo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sunflow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validation&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;testing&quot;&gt;Testing&lt;/h1&gt;

&lt;p&gt;The Docker images used in these tests are both Java 8 with OpenJDK8, but one with &lt;strong&gt;HotSpot&lt;/strong&gt; underneath, the other with &lt;strong&gt;OpenJ9&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;adoptopenjdk/openjdk8&lt;/li&gt;
  &lt;li&gt;adoptopenjdk/openjdk8-openj9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again I started the Docker image with a directory linked to the host containing the SPEC benchmark:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Start Docker:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Projects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;SPECjvm2008:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPECjvm2008&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adoptopenjdk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openjdk8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openj9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bash&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Go to the correct directory:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPECjvm2008&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Run the (working) tests:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xmx600m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPECjvm2008&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;helloworld&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compiler&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rsa&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signverify&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mpegaudio&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fft&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lu&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;monte_carlo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sparse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sunflow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compiler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rsa&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signverify&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derby&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpegaudio&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;large&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;large&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;large&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;large&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scimark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;monte_carlo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sunflow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validation&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;

&lt;p&gt;After waiting a long time for the benchmark to finish, I’ve got the following results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jvm-cpu-spec.png&quot; alt=&quot;Chart with SPECjvm2008 results&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The graph is measured in &lt;em&gt;ops/m&lt;/em&gt;, higher is better. Results may vary of course depending on hardware.&lt;/p&gt;

&lt;p&gt;In most cases HotSpot is faster than OpenJ9, and in two cases &lt;strong&gt;HotSpot&lt;/strong&gt; is &lt;em&gt;much&lt;/em&gt; faster, &lt;strong&gt;crypto&lt;/strong&gt; and &lt;strong&gt;derby&lt;/strong&gt;. It appears this is a case where HotSpot is doing something special that J9 isn’t doing (yet?). This might be important to know if you’re working on applications that do a lot of cryptology, for example high performance secured endpoints.&lt;/p&gt;

&lt;p&gt;One place where &lt;strong&gt;OpenJ9&lt;/strong&gt; came out on top is &lt;strong&gt;XML validation&lt;/strong&gt;. Parsing/validation is also an important part in most modern applications, so this could be a case where J9 makes up some lost ground in actual production code.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Is there a real conclusion from this? I don’t think so.&lt;/p&gt;

&lt;p&gt;The real lesson here is: Experiment, measure and you’ll know.
Never decided anything based on some online benchmark.&lt;/p&gt;

&lt;p&gt;If there is anything else you’d love me to test, send me a tweet: &lt;a href=&quot;https://twitter.com/royvanrijn&quot;&gt;royvanrijn&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 17 May 2018 14:14:31 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2018/05/openj9-hotsport-specjvm2008/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2018/05/openj9-hotsport-specjvm2008/</guid>
        
        <category>Java</category>
        
        <category>Memory</category>
        
        <category>OpenJDK</category>
        
        <category>OpenJ9</category>
        
        <category>SPECjvm2008</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Part 1: OpenJ9 versus HotSpot</title>
        <description>&lt;h1 id=&quot;tldr&quot;&gt;TLDR;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/openj9/&quot;&gt;OpenJ9&lt;/a&gt; and &lt;a href=&quot;https://www.ibm.com/support/knowledgecenter/en/SS6QYM_9.1.0/com.ibm.help.perf.manage.doc/c_FND_PM_IBMJ9JVM.html&quot;&gt;IBM J9&lt;/a&gt; are a different JVM implementation from the default Oracle HotSpot JVM. With the modern &lt;a href=&quot;https://hub.docker.com/u/adoptopenjdk/&quot;&gt;adoptopenjdk&lt;/a&gt; pre-made Docker images it is easy to swap and test different combinations and pick the right JVM for you.&lt;/p&gt;

&lt;p&gt;The rumours seem to be true, OpenJ9 seems to blow HotSpot away on memory usage. HotSpot seems to have the edge CPU-wise.&lt;/p&gt;

&lt;h1 id=&quot;openj9&quot;&gt;OpenJ9&lt;/h1&gt;

&lt;p&gt;In the Java world most people are familiar with OpenJDK. This is a complete JDK implementation including the HotSpot JVM engine. Not a lot of developers know or try alternatives to HotSpot. Asking around some colleagues remembered the name JRockit, nobody mentioned IBM J9 and/or Eclipse OpenJ9.&lt;/p&gt;

&lt;p&gt;I’ve read that &lt;a href=&quot;https://medium.com/criciumadev/new-open-source-jvm-optimized-for-cloud-and-microservices-c75a41aa987d&quot;&gt;OpenJ9 is very good with memory management&lt;/a&gt; and is tailered for usage in the cloud/in containers. OpenJ9 is an independent implementation of the JVM. It’s origins are IBM’s Java SDK/IBM J9 which can trace its history back to OTI Technologies Envy Smalltalk (thanks Dan Heidinga!).&lt;/p&gt;

&lt;p&gt;With the current rise in microservice usage (and most services are &lt;strong&gt;not&lt;/strong&gt; so micro in Java). I recon this could become a hot topic again!&lt;/p&gt;

&lt;h1 id=&quot;testing&quot;&gt;Testing&lt;/h1&gt;

&lt;p&gt;Before the &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;-era it was relatively hard to compare different JVMs, versions. You needed to download, install, script and run everything. But now a lot of pre-made images are available online.&lt;/p&gt;

&lt;p&gt;Here is my idea on how to test the JVMs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a simple &lt;a href=&quot;https://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt; application&lt;/li&gt;
  &lt;li&gt;Start the application in various Docker Images&lt;/li&gt;
  &lt;li&gt;Measure memory usage after startup and GC&lt;/li&gt;
  &lt;li&gt;Measure the time it takes to run a small CPU-intensive test&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is by no means a thorough test or benchmark, but it should give us a basic idea of what we can expect from the virtual machines.&lt;/p&gt;

&lt;h2 id=&quot;spring-boot-application&quot;&gt;Spring Boot application&lt;/h2&gt;

&lt;p&gt;The Spring Boot application I created contains the following endpoints:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A REST endpoint that calls the GC (trying to make it fair)&lt;/li&gt;
  &lt;li&gt;A REST endpoint that creates 1000 large random arrays and sorts them, returns the runtime (in ms)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the listing of the CPU-test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoadTestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/loadtest&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadTestResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadtest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextLong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoadTestResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again, we can argue endlessly about if this test makes sense and is even remotely relevant… but still it should give us some basic idea of what kind of performance we can expect.
If the rumoured memory improvements are true, might there be a performance hit? Is there a performance trade-off?&lt;/p&gt;

&lt;h2 id=&quot;jvm-images&quot;&gt;JVM images&lt;/h2&gt;

&lt;p&gt;I’ve decided to test the following images.&lt;/p&gt;

&lt;p&gt;First we have the (slim) &lt;a href=&quot;https://hub.docker.com/_/openjdk/&quot;&gt;openjdk&lt;/a&gt; images for 8/9/10/11:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;openjdk:8-slim&lt;/li&gt;
  &lt;li&gt;openjdk:9-slim&lt;/li&gt;
  &lt;li&gt;openjdk:10-slim&lt;/li&gt;
  &lt;li&gt;openjdk:11-slim&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next there are the &lt;a href=&quot;https://hub.docker.com/u/adoptopenjdk/&quot;&gt;adoptopenjdk&lt;/a&gt; images for 8/9/10:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;adoptopenjdk/openjdk8&lt;/li&gt;
  &lt;li&gt;adoptopenjdk/openjdk9&lt;/li&gt;
  &lt;li&gt;adoptopenjdk/openjdk10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we have OpenJ9, again provided by &lt;a href=&quot;https://hub.docker.com/u/adoptopenjdk/&quot;&gt;adoptopenjdk&lt;/a&gt; for 8, 9 and a nightly build of 9 (see my previous blogpost):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;adoptopenjdk/openjdk8-openj9&lt;/li&gt;
  &lt;li&gt;adoptopenjdk/openjdk9-openj9&lt;/li&gt;
  &lt;li&gt;adoptopenjdk/openjdk9-openj9:nightly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I decided to include IBM’s own J9 image as well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ibmcom/ibmjava:8-jre&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing-with-docker&quot;&gt;Testing with Docker&lt;/h2&gt;

&lt;p&gt;After building my Spring Boot application I launched each Docker image using the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -it -v /Projects/temp/spring-boot-example:/app/spring-boot-example -p 8080:8080 IMAGE_NAME /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m mapping my “&lt;em&gt;spring-boot-example&lt;/em&gt;” project folder to “&lt;em&gt;/apps/spring-boot-example&lt;/em&gt;” so I can start the JAR file inside the container. Also I’m forwarding port 8080 back to my host so I can call the endpoints.&lt;/p&gt;

&lt;p&gt;Next, inside the container, I launch the Spring Boot application:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java -jar /app/spring-boot-example/target/spring-boot-example-0.0.1-SNAPSHOT.jar&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After waiting a bit, calling the endpoints a couple of times and performing a GC I measured the memory usage.&lt;/p&gt;

&lt;p&gt;After that I called the “&lt;em&gt;/loadtest&lt;/em&gt;” endpoint containing the array-sorting test and waited for the results.&lt;/p&gt;

&lt;h1 id=&quot;memory-benchmark&quot;&gt;Memory benchmark&lt;/h1&gt;

&lt;p&gt;Here are the results of the memory used by the simple Spring Boot application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jvm-memory-usage.png&quot; alt=&quot;Chart with memory usage per Docker Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first you can see that the memory usage for Java 8 is much higher than for Java 9 and 10, good!&lt;/p&gt;

&lt;p&gt;But the biggest shock is how much less memory OpenJ9 and J9 are using, almost &lt;strong&gt;4x&lt;/strong&gt; less memory if you compare Java 8 with OpenJ9. I’m amazed, how does this even work? Now we can &lt;em&gt;almost&lt;/em&gt; call our Spring Boot service &lt;strong&gt;micro&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;I’ve also experimented with running some production Spring Boot code (not just simple examples) and here I’ve seen improvements up to 40-50% decrease in memory usage.&lt;/p&gt;

&lt;h1 id=&quot;cpu-benchmark&quot;&gt;CPU benchmark&lt;/h1&gt;

&lt;p&gt;Online I’ve read that OpenJ9 isn’t as good as HotSpot if you look at CPU intensive tasks. That is why I created a small test for this as well.&lt;/p&gt;

&lt;p&gt;1000 arrays with 1000000 random long values being sorted. This takes around 100 seconds, this should give the JVM enough time to adjust and optimize. I’ve called the benchmark twice for each tested image. I’ve recorded the second time trying to eliminate warmup times.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jvm-cpu-speed.png&quot; alt=&quot;Chart with CPU usage per Docker Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the chart we can see that indeed the J9 and OpenJ9 images are slower, not by much max 18%. It seems for this particular testcase Java 8 beats most Java 9 implementations (except coupled with OpenJ9).&lt;/p&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h1&gt;

&lt;p&gt;My current project has a lot more memory issues than CPU issues on production (frequently running out of memory while having 1-2% CPU usage). We are definitely thinking about switching to OpenJ9 in the near future!&lt;/p&gt;

&lt;p&gt;We did already encounter some issues during testing:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Hessian&lt;/strong&gt;: (binary protocol) has a build-in assumption that System.identityHashCode always returns a positive number. For HotSpot this is true but OpenJ9/J9 can also return negative numbers. This is an open issue and the Hessian project hasn’t fixed this in a couple of years, seems to be dead? Our solution is to move away from Hessian altogether&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Instana&lt;/strong&gt;: We love our monitoring tool Instana, but it had some problems connecting their agent to OpenJ9/J9. Luckily the people at Instana helped us identify a bug and a fix should be published today (and is automatically updated, w00t!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Open questions I haven’t looked in to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Can you still get/use jmap/&lt;strong&gt;hprof&lt;/strong&gt; information etc in OpenJ9?&lt;/li&gt;
  &lt;li&gt;How will it hold up during longer production runs?&lt;/li&gt;
  &lt;li&gt;Will we find other weird bugs? It feels tricky…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Have you tried OpenJ9/J9? Let me know in the comments.&lt;/p&gt;

&lt;p&gt;Is there anything else you’d love to see tested? The best way to contact me is to send me a tweet &lt;a href=&quot;https://twitter.com/royvanrijn&quot;&gt;royvanrijn&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 16 May 2018 13:54:31 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2018/05/openj9-jvm-shootout/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2018/05/openj9-jvm-shootout/</guid>
        
        <category>Java</category>
        
        <category>Memory</category>
        
        <category>OpenJDK</category>
        
        <category>OpenJ9</category>
        
        <category>Microservices</category>
        
        <category>Spring Boot</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Java and Docker, the limitations</title>
        <description>&lt;h1 id=&quot;tldr&quot;&gt;TLDR;&lt;/h1&gt;

&lt;p&gt;Java and Docker aren’t friends out of the box. Docker can set memory and CPU limitations that Java can’t automatically detect. Using either Java Xmx flags (cumbersome/duplicated) &lt;em&gt;or&lt;/em&gt; the new experimental JVM flags we can solve this issue.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.docker.com/2018/04/improved-docker-container-integration-with-java-10/&quot;&gt;Docker love&lt;/a&gt; for Java is in its way in newer versions of both OpenJ9 and OpenJDK 10!&lt;/p&gt;

&lt;h1 id=&quot;mismatch-in-virtualization&quot;&gt;Mismatch in virtualization&lt;/h1&gt;

&lt;p&gt;The combination of Java and Docker isn’t a match made in heaven, initially it was far from it. For starters, the whole premise of the JVM, Java Virtual Machine, was that having a Virtual Machine makes the underlying hardware irrelevant from the program’s point of view.&lt;/p&gt;

&lt;p&gt;So what do we gain by packaging our Java application inside a JVM (Virtual Machine) inside a Docker container? Not a lot, for the most part you are duplicating JVMs and Linux containers, which kills memory usage. This just sounds silly.&lt;/p&gt;

&lt;p&gt;It does make it easy to bundle together your program, the settings, a specific JDK, Linux settings and (if needed) an application server and other tools as one ‘thing’. This complete container has a better level of encapsulation from a devops/cloud point of view.&lt;/p&gt;

&lt;h2 id=&quot;problem-1-memory&quot;&gt;Problem 1: Memory&lt;/h2&gt;

&lt;p&gt;Most applications in production today are still using Java 8 (or older) and this might give you problems. Java 8 (before update 131) doesn’t play nice with Docker. The problem is that the amount of memory and CPUs available to the JVM isn’t the total amount of memory and CPU of &lt;em&gt;your machine&lt;/em&gt;, it is what &lt;em&gt;Docker&lt;/em&gt; is allowing you to use (duh).&lt;/p&gt;

&lt;p&gt;For example if you limit your Docker container to get only 100MB of memory, this isn’t something ‘old’ Java was aware of. Java doesn’t see this limit. The JVM will claim more and more memory and go over this limit. Docker will then take action into its own hands and kill the process inside the container if too much memory is used! The Java process is ‘Killed’. This is not what we want…&lt;/p&gt;

&lt;p&gt;To fix this you will &lt;strong&gt;also&lt;/strong&gt; need to specify to Java there is a maximum memory limit. In &lt;strong&gt;older Java&lt;/strong&gt; versions (before 8u131) you needed to specify this &lt;em&gt;inside&lt;/em&gt; your container by setting &lt;strong&gt;-Xmx&lt;/strong&gt; flags to limit the heap size. This feels wrong, you’d rather not want to define these limits twice, nor do you want to define this ‘inside’ your container.&lt;/p&gt;

&lt;p&gt;Luckily there are better ways to fix this now. From &lt;strong&gt;Java 9&lt;/strong&gt; onwards (and from &lt;strong&gt;8u131+&lt;/strong&gt; onwards, backported) there are flags added to the JVM:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These flags will force the JVM to look at the Linux &lt;em&gt;cgroup&lt;/em&gt; configuration. This is where Docker containers specify their maximum memory settings. Now, if your application reaches the limit set by Docker (500MB), the JVM will see this limit. It’ll try to GC. If it still runs out of memory the JVM will do what it is supposed to do, throw an OutOfMemoryException. Basically this allows the JVM to ‘see’ the limit that has been set by Docker.&lt;/p&gt;

&lt;p&gt;From &lt;strong&gt;Java 10&lt;/strong&gt; onwards (see test below) these experimental flags are the new default and are enabled using the -XX:+UseContainerSupport flag (you can disable this behaviour by providing -XX:-UseContainerSupport).&lt;/p&gt;

&lt;h2 id=&quot;problem-2-cpu&quot;&gt;Problem 2: CPU&lt;/h2&gt;

&lt;p&gt;The second problem is similar, but it has to do with the CPU. In short, the JVM will look at the hardware and detect the amount of CPU’s there are. It’ll optimize your runtime to use those CPU’s. But again, Docker might not allow you to &lt;strong&gt;use&lt;/strong&gt; all these CPU’s, there is another mismatch here. Sadly this isn’t fixed in Java 8 or Java 9, but was tackled in Java 10.&lt;/p&gt;

&lt;p&gt;From Java 10 onwards the available CPUs will be calculated in a different way (by default) fixing this problem (also with UseContainerSupport).&lt;/p&gt;

&lt;h1 id=&quot;testing-java-and-docker-memory-handling&quot;&gt;Testing Java and Docker memory handling&lt;/h1&gt;

&lt;p&gt;As a fun exercise, lets verify and test how Docker handles out of memory using a couple of different JVM versions/flags and even a different JVM.&lt;/p&gt;

&lt;p&gt;First we create a test application, one that simply ‘eats’ memory and doesn’t free it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemEat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1048576&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;free memory: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;freeMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can start Docker containers and run this application to see what will happen.&lt;/p&gt;

&lt;h2 id=&quot;test-1-java-8u111&quot;&gt;Test 1: Java 8u111&lt;/h2&gt;

&lt;p&gt;First we’ll start with a container that has an older version of Java 8 (update 111).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -m 100m -it java:openjdk-8u111 /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We compile and run the MemEat.java file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;javac MemEat.java

java MemEat
...
free memory: 67194416
free memory: 66145824
free memory: 65097232
Killed&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As expected, Docker has killed the our Java process. Not what we want (!). Also you can see the output, Java thinks it still has a lot of memory left to allocate.&lt;/p&gt;

&lt;p&gt;We can fix this by providing Java with a maximum memory using the &lt;em&gt;-Xmx&lt;/em&gt; flag:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;javac MemEat.java

java -Xmx100m MemEat
...
free memory: 1155664
free memory: 1679936
free memory: 2204208
free memory: 1315752
Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space
	at MemEat.main(MemEat.java:8)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After providing our own memory limits, the process is halted correctly, the JVM understands the limits it is operating under. The &lt;strong&gt;problem&lt;/strong&gt; is however that you are now setting these memory limits &lt;strong&gt;twice&lt;/strong&gt;, for Docker &lt;em&gt;AND&lt;/em&gt; for the JVM.&lt;/p&gt;

&lt;h2 id=&quot;test-2-java-8u144&quot;&gt;Test 2: Java 8u144&lt;/h2&gt;

&lt;p&gt;As mentioned, with the new flags this has been fixed, the JVM will now follow the settings provided by Docker. We can test this using a newer JVM.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -m 100m -it adoptopenjdk/openjdk8 /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(this OpenJDK Java image currently contains, at the time of writing, Java 8u144)&lt;/p&gt;

&lt;p&gt;Next we compile and run the MemEat.java file again without any flags:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;javac MemEat.java

java MemEat
...
free memory: 67194416
free memory: 66145824
free memory: 65097232
Killed&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same problem exists. But we can now supply the experimental flags mentioned above:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;javac MemEat.java
java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap MemEat
...
free memory: 1679936
free memory: 2204208
free memory: 1155616
free memory: 1155600
Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space
	at MemEat.main(MemEat.java:8)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This time we didn’t set any limits on the JVM by telling it what the limits &lt;em&gt;are&lt;/em&gt;, we just told the JVM to look at the correct settings! Much better.&lt;/p&gt;

&lt;h2 id=&quot;test-3-java-10u23&quot;&gt;Test 3: Java 10u23&lt;/h2&gt;

&lt;p&gt;Some people in the comments and on Reddit mentioned that Java 10 solves everything by making the experimental flags the new default.
This behaviour can be turned off by disabling this flag: -XX:-UseContainerSupport.&lt;/p&gt;

&lt;p&gt;When I tested this it initially didn’t work. At the time of writing the AdoptAJDK OpenJDK10 image is packaged with jdk-10+23. This JVM apparently doesn’t understand the ‘UseContainerSupport’ flag (yet) and the process was still killed by Docker.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -m 100m -it adoptopenjdk/openjdk10 /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Testing the code (and even providing the flag manually):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;javac MemEat.java

java MemEat
...
free memory: 96262112
free memory: 94164960
free memory: 92067808
free memory: 89970656
Killed

java -XX:+UseContainerSupport MemEat

Unrecognized VM option 'UseContainerSupport'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;test-4-java-10u46-nightly&quot;&gt;Test 4: Java 10u46 (Nightly)&lt;/h2&gt;

&lt;p&gt;I decided to try the latest ‘nightly’ build of AdoptAJDK OpenJDK 10. Instead of Java 10+23 it includes 10+46.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -m 100m -it adoptopenjdk/openjdk10:nightly /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is a problem in this nightly build though, the exported PATH points to the old Java 10+23 directory, not to 10+46, we need to fix this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;export PATH=$PATH:/opt/java/openjdk/jdk-10+46/bin/

javac MemEat.java

java MemEat
...
free memory: 3566824
free memory: 2796008
free memory: 1480320
Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space
  at MemEat.main(MemEat.java:8)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Succes! Without providing any flags Java 10 correctly detected Dockers memory limits.&lt;/p&gt;

&lt;h2 id=&quot;test-5-openj9&quot;&gt;Test 5: OpenJ9&lt;/h2&gt;

&lt;p&gt;I’ve also been experimenting with OpenJ9 recently, this free alternative JVM has been open sourced from IBMs J9 and is now maintained by Eclipse.&lt;/p&gt;

&lt;p&gt;Read more about OpenJ9 in my &lt;a href=&quot;/blog/2018/05/openj9-jvm-shootout/&quot;&gt;next blogpost&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is fast and is very good with memory management, mindblowlingly good, often using up to 30-50% less memory for our microservices. This almost makes it possible to classify Spring Boot apps as ‘micro’ with a 100-200mb runtime nstead of 300mb+. I’m planning on doing a write-up about this very soon.&lt;/p&gt;

&lt;p&gt;To my surprise however, OpenJ9 doesn’t yet have an option similar to the flags currently (backported) in Java 8/9/10+ for cgroup memory limits. For example if we apply the previous testcase to the latest AdoptAJDK OpenJDK 9 + OpenJ9 build:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -m 100m -it adoptopenjdk/openjdk9-openj9 /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And we add the OpenJDK flags (which are ignored by OpenJ9) we get:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap MemEat
...
free memory: 83988984
free memory: 82940400
free memory: 81891816
Killed&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oops, the JVM is killed by Docker again.&lt;/p&gt;

&lt;p&gt;I really hope a similar option will be added soon to OpenJ9, because I’d love to run this in production without having to specify the maximum memory twice. Eclipse/IBM is working on a fix for this, there are already issues and even pull requests for this issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE: (not recommended hack)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A slightly ugly/hacky way to fix this is using the following composed flag:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java -Xmx`cat /sys/fs/cgroup/memory/memory.limit_in_bytes` MemEat
...
free memory: 3171536
free memory: 2127048
free memory: 2397632
free memory: 1344952
JVMDUMP039I Processing dump event &quot;systhrow&quot;, detail &quot;java/lang/OutOfMemoryError&quot; at 2018/05/15 14:04:26 - please wait.
JVMDUMP032I JVM requested System dump using '//core.20180515.140426.125.0001.dmp' in response to an event
JVMDUMP010I System dump written to //core.20180515.140426.125.0001.dmp
JVMDUMP032I JVM requested Heap dump using '//heapdump.20180515.140426.125.0002.phd' in response to an event
JVMDUMP010I Heap dump written to //heapdump.20180515.140426.125.0002.phd
JVMDUMP032I JVM requested Java dump using '//javacore.20180515.140426.125.0003.txt' in response to an event
JVMDUMP010I Java dump written to //javacore.20180515.140426.125.0003.txt
JVMDUMP032I JVM requested Snap dump using '//Snap.20180515.140426.125.0004.trc' in response to an event
JVMDUMP010I Snap dump written to //Snap.20180515.140426.125.0004.trc
JVMDUMP013I Processed dump event &quot;systhrow&quot;, detail &quot;java/lang/OutOfMemoryError&quot;.
Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space
  at MemEat.main(MemEat.java:8)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case the heap size is limited to the memory allocated to the Docker instance, this works for older JVMs and OpenJ9. This is of course &lt;em&gt;wrong&lt;/em&gt; because the container itself and other parts of the JVM off the heap also use memory. But it seems to work, appearantly Docker is lenient in this case. Maybe some bash-guru will make a better version subtracting a portion from the bytes for other processes.&lt;/p&gt;

&lt;p&gt;Anyway, &lt;strong&gt;don’t&lt;/strong&gt; do this, it might not work.&lt;/p&gt;

&lt;h2 id=&quot;test-6-openj9-nightly&quot;&gt;Test 6: OpenJ9 (Nightly)&lt;/h2&gt;

&lt;p&gt;Someone suggested using the latest ‘nightly’ build for OpenJ9.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -m 100m -it adoptopenjdk/openjdk9-openj9:nightly /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will get the latest nightly build of OpenJ9, and it has two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Another broken PATH parameter, fix that.&lt;/li&gt;
  &lt;li&gt;The JVM has support for the new flag UseContainerSupport (like Java 10 will)&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;export PATH=$PATH:/opt/java/openjdk/jdk-9.0.4+12/bin/

javac MemEat.java

java -XX:+UseContainerSupport MemEat
...
free memory: 5864464
free memory: 4815880
free memory: 3443712
free memory: 2391032
JVMDUMP039I Processing dump event &quot;systhrow&quot;, detail &quot;java/lang/OutOfMemoryError&quot; at 2018/05/15 21:32:07 - please wait.
JVMDUMP032I JVM requested System dump using '//core.20180515.213207.62.0001.dmp' in response to an event
JVMDUMP010I System dump written to //core.20180515.213207.62.0001.dmp
JVMDUMP032I JVM requested Heap dump using '//heapdump.20180515.213207.62.0002.phd' in response to an event
JVMDUMP010I Heap dump written to //heapdump.20180515.213207.62.0002.phd
JVMDUMP032I JVM requested Java dump using '//javacore.20180515.213207.62.0003.txt' in response to an event
JVMDUMP010I Java dump written to //javacore.20180515.213207.62.0003.txt
JVMDUMP032I JVM requested Snap dump using '//Snap.20180515.213207.62.0004.trc' in response to an event
JVMDUMP010I Snap dump written to //Snap.20180515.213207.62.0004.trc
JVMDUMP013I Processed dump event &quot;systhrow&quot;, detail &quot;java/lang/OutOfMemoryError&quot;.
Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;TADAAA&lt;/strong&gt;, a fix is on the way!&lt;/p&gt;

&lt;p&gt;Oddly it seems this flag isn’t enabled by default in OpenJ9 like it is in Java 10 though. Again: Make sure you test this is you want to run Java inside a Docker container.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;IN SHORT:&lt;/strong&gt; Be aware of the mismatch, the limitations. Test your memory settings and JVM flags, don’t assume anything.&lt;/p&gt;

&lt;p&gt;If you are running Java inside a Docker container, make sure that you have Docker memory limits &lt;strong&gt;AND&lt;/strong&gt; limits in the JVM or a JVM that understands these limits.&lt;/p&gt;

&lt;p&gt;If you’re &lt;strong&gt;not&lt;/strong&gt; able to &lt;strong&gt;upgrade&lt;/strong&gt; your Java version set your own limits using &lt;strong&gt;-Xmx&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Java 8&lt;/strong&gt; and &lt;strong&gt;Java 9&lt;/strong&gt;, update to the latest version and use:&lt;/p&gt;

&lt;p&gt;-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Java 10&lt;/strong&gt;, make sure it understands the ‘UseContainerSupport’ (update to latest) and just run it.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;OpenJ9&lt;/strong&gt; (which I highly recommend for bringing down your memory footprint in production) for now set the limits using -Xmx, but soon there will be a version that understands the ‘UseContainerSupport’ flag.&lt;/p&gt;

</description>
        <pubDate>Wed, 16 May 2018 08:14:11 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2018/05/java-and-docker-memory-limits/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2018/05/java-and-docker-memory-limits/</guid>
        
        <category>Java</category>
        
        <category>Memory</category>
        
        <category>OpenJDK</category>
        
        <category>Docker</category>
        
        <category>Microservices</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>In a microservices landscape; When do you update?</title>
        <description>&lt;p&gt;This week I’ve been stuggling with the following question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When is the right time to upgrade?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By upgrading, I mean everything: libraries, tools, Java versions, application servers, MQ servers…&lt;/p&gt;

&lt;p&gt;My current project uses a reactive upgrade policy, we upgrade for four reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Something is broken and fixed in a later version&lt;/li&gt;
  &lt;li&gt;We need or want to use a new feature&lt;/li&gt;
  &lt;li&gt;Support for a version we’re using is being dropped&lt;/li&gt;
  &lt;li&gt;The old version we’re using has a known security issue/CVE&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first two reasons are entirely up to the programmers to decide. The third reason is up to the company that gives us support. For the fourth upgrade reason, security, we have some automation in place. We are using the &lt;a href=&quot;https://www.owasp.org/index.php/OWASP_Dependency_Check&quot;&gt;OWASP dependency checker&lt;/a&gt; Maven plugin for our libraries.&lt;/p&gt;

&lt;p&gt;But:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Is a reactive update policy good enough?&lt;/li&gt;
  &lt;li&gt;Are there any pro-active strategies?&lt;/li&gt;
  &lt;li&gt;Do you want to invest in keeping your microservices up-to-date?&lt;/li&gt;
  &lt;li&gt;Do you let your services deteriorate and dispose, replace them in the future with new technologies?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More on this in my (kind-of-weekly) vlog:&lt;/p&gt;

&lt;iframe type=&quot;text/html&quot; width=&quot;640&quot; height=&quot;390&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot; src=&quot;http://www.youtube.com/embed/LRE-feZWmlM&quot;&gt;&lt;/iframe&gt;

</description>
        <pubDate>Wed, 17 Jan 2018 10:28:12 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2018/01/updating-dependencies-in-microservices/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2018/01/updating-dependencies-in-microservices/</guid>
        
        <category>YouTube</category>
        
        <category>Programming</category>
        
        <category>Vlog</category>
        
        <category>Update</category>
        
        <category>Microservices</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Fear of upgrading to Java 9, is it justified?</title>
        <description>&lt;p&gt;It seems that the adoptation of Java 9 is slow, very slow. In a &lt;a href=&quot;https://twitter.com/royvanrijn/status/950718660641017856&quot;&gt;Twitter poll&lt;/a&gt; this week I asked:
“Which version of Java are you using in production?”&lt;/p&gt;

&lt;p&gt;The poll got almost 300 replies and to my surprise just 3% of the respondents are using Java 9 at the moment. Most are using Java 8 and there are even more people using Java 6… So what is holding people back? Why is almost no-one using Java 9?&lt;/p&gt;

&lt;p&gt;It turns out a lot of people are scared to upgrade to Java 9. They think it’ll be hard to do, libraries and tools will fail them. They are scared for another Jar-hell.&lt;/p&gt;

&lt;p&gt;That is why I took one of my larger projects, that has been running in production for a long time, and try to upgrade it to Java 9.&lt;/p&gt;

&lt;h2 id=&quot;upgrading-walk-in-the-park-or-walk-in-jar-hell&quot;&gt;Upgrading: Walk in the park or walk in jar-hell?&lt;/h2&gt;

&lt;p&gt;Here are my results and findings, in a new format: &lt;strong&gt;a vlog&lt;/strong&gt;&lt;/p&gt;

&lt;iframe type=&quot;text/html&quot; width=&quot;640&quot; height=&quot;390&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot; src=&quot;http://www.youtube.com/embed/tKUNMyZ9LEU&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If you like the vlog and follow my website, please subscribe to my channel on YouTube!&lt;/p&gt;

</description>
        <pubDate>Wed, 17 Jan 2018 10:28:12 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2018/01/java-9-adoptation/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2018/01/java-9-adoptation/</guid>
        
        <category>YouTube</category>
        
        <category>Programming</category>
        
        <category>Vlog</category>
        
        <category>Upgrade</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Inverse Conway's law</title>
        <description>&lt;p&gt;Today I got to present at &lt;a href=&quot;http://www.devoxx.pl&quot;&gt;Devoxx Poland&lt;/a&gt; on being agile and managing your architecture.&lt;/p&gt;

&lt;p&gt;One of the points I made during the talk had to do with Conway’s Law. For those unfamiliar with it, here it is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;organizations which design systems … are constrained to produce designs which are copies of the communication structures of these organizations &lt;cite&gt;M. Conway&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This basically means that the code you create is likely to reflect the way the people and teams in your company communicate. For example, banks are usually pretty strict and have a tendency to document things. The code written at banks in turn have the tendency to use SOAP for example, verbose and strict.&lt;/p&gt;

&lt;p&gt;The project I’m currently working on has a very agile mindset, we change a lot and have open communication. This reflects in our codebase as well, all the code is easy to understand and easy to change (thankfully!).&lt;/p&gt;

&lt;p&gt;But lately we’ve started to move away from our old monolith and we’ve began cutting it up into microservices. That’s when I noticed something odd, which I call the &lt;strong&gt;Inverse Conway’s Law&lt;/strong&gt; (maybe it is &lt;strong&gt;Roy’s Law&lt;/strong&gt;?):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;organisations which radically change their system design should expect changes in communication structure &lt;cite&gt;Roy van Rijn&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this mean?&lt;/p&gt;

&lt;p&gt;We’ve started to move towards a microservice environment, where each team has a responsibility over a couple of services. They’ve developed it and they &lt;em&gt;own&lt;/em&gt; it. This ownership completely changed the culture in our team. Up to now if the monolithic backend was broken or offline, everyone was hurting and everyone wanted to fix this as soon as possible. With microservices, this is gone. The first thing we now do is check which microservice failed. If it isn’t theirs, it is not their problem, it’s someone elses problem now!&lt;/p&gt;

&lt;p&gt;This is just one example on how changing the design of our system changed the culture and team dynamic. It is one thing that sounds logical when you think about it, but I didn’t expect this before we started the transition.&lt;/p&gt;

</description>
        <pubDate>Thu, 22 Jun 2017 14:28:12 +0200</pubDate>
        <link>http://royvanrijn.com/blog/2017/06/inverse-conways-law/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2017/06/inverse-conways-law/</guid>
        
        <category>Devoxx</category>
        
        <category>Programming</category>
        
        <category>Scrum</category>
        
        <category>Conway</category>
        
        <category>conference</category>
        
        
        <category>Agile</category>
        
      </item>
    
      <item>
        <title>JavaOne Rock Star 2016</title>
        <description>&lt;p&gt;Today I got an email with the subject: “Congratulations JavaOne 2016 Rock Star!”. It turns out the JavaOne 2016 Ignite session was voted enough to receive a JavaOne &lt;a href=&quot;https://www.oracle.com/javaone/rock-star-wall-of-fame.html&quot;&gt;Rock Star&lt;/a&gt; Award!&lt;/p&gt;

&lt;p&gt;I was so excited, elated even!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rockstar1.gif&quot; alt=&quot;Rocking that talk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But I quickly found out that the JavaOne Rock Star lifestyle &lt;strong&gt;isn’t&lt;/strong&gt; as much fun as it sounds.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Being 3 hours late for a meeting, even a Rock Star can’t do that.&lt;/li&gt;
  &lt;li&gt;Peeing in the corner of your office while holding a bottle of Jack Daniels, still not appreciated.&lt;/li&gt;
  &lt;li&gt;Wearing ripped jeans, a leather jacket and other than that just chest hair, is considered &lt;em&gt;too&lt;/em&gt; casual.&lt;/li&gt;
  &lt;li&gt;The groupies? It is like answering random Stack Overflow questions, non-stop, face to face.&lt;/li&gt;
  &lt;li&gt;After each coding session, smashing your MacBook on the floor… quickly becomes expensive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/drunk-wombat.jpg&quot; alt=&quot;Drunk Wombat holding bottle of Jack Daniels&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 01 Feb 2017 09:28:12 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2017/02/javaone-rock-star-2016/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2017/02/javaone-rock-star-2016/</guid>
        
        <category>Java</category>
        
        <category>JavaOne</category>
        
        <category>Rockstar</category>
        
        <category>Award</category>
        
        <category>Ignite</category>
        
        <category>conference</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Vikipedia: A Java YouTube bot</title>
        <description>&lt;p&gt;YouTube, the future of television. I’ve got a lot of subscriptions to YouTube channels that deliver quality content, and those shows are ‘cast’ (using my Chromecast) to my TV. Another thing I often do is look up information, for example I watch talks from programming conferences like &lt;a href=&quot;https://www.youtube.com/channel/UCCBVCTuk6uJrN3iFV_3vurg/videos&quot;&gt;Devoxx&lt;/a&gt; using YouTube.&lt;/p&gt;

&lt;p&gt;This gave me an idea, what if I can take some free information (like Wikipedia, all creative commons) and use that to create content for YouTube? Maybe I’ll even get some views :-)&lt;/p&gt;

&lt;p&gt;So this is what I’ve come up with, the following video is generated completely automatically:&lt;/p&gt;

&lt;iframe id=&quot;randomVikipediaVideo&quot; width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/channel/UCSjEbLaNj1yKFgQpjLoqkUw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;script&gt;

function nextVideo(autoplay) {

    /* Don't always insert the same video in the article, spread the views across the videos randomly: */
    var iframe = document.getElementById('randomVikipediaVideo');
    var allVideos = [&quot;dw_HP2AeYIU&quot;,&quot;VXNElLG9t_Q&quot;,&quot;2shv5Fv7ZNg&quot;,&quot;mnYrSUiLIgg&quot;,&quot;N45qnVlEAHw&quot;,&quot;1qBaUYcXJWM&quot;,&quot;ayZCJizN604&quot;,&quot;Z6N4bJDs9m4&quot;,&quot;AX4Ex5nYQqM&quot;,&quot;w9QF30yOGag&quot;,&quot;gruzWYNhE04&quot;,&quot;5rKxcZKIOP0&quot;,&quot;T-QvHcEMHEc&quot;,&quot;I4BR-pA9APc&quot;,&quot;QsbM9R0qAWE&quot;,&quot;4kPdhwVCAck&quot;,&quot;vV3JjOLOc0o&quot;,&quot;YU1UFQr9ezA&quot;,&quot;-6XJK7-L4Qk&quot;,&quot;1Uxn51TtA24&quot;,&quot;UknPDIoHVYc&quot;,&quot;WmTwh7AsaJQ&quot;,&quot;8dNTnrA_5gY&quot;,&quot;EH1MytpdcpM&quot;,&quot;bavzjaZLCJc&quot;,&quot;vro8u3N4HBc&quot;,&quot;k-LDzwP8jbs&quot;,&quot;dGPQUHKlabc&quot;,&quot;VlC1q_Edqj0&quot;,&quot;-zOb7D33SCE&quot;,&quot;OtyjkvlMJQY&quot;,&quot;ta3S29-evYY&quot;,&quot;KNTMCnZTp4k&quot;,&quot;UaH7hZXIiso&quot;,&quot;zIWxkcpc4cI&quot;,&quot;c5Ql0T-DHWM&quot;,&quot;whC5odvJmzA&quot;,&quot;lRpBMLmxQ3A&quot;,&quot;OEkTxgxFxm8&quot;,&quot;wzHdr1cG9qY&quot;,&quot;hRAU_4VPtVE&quot;,&quot;y8AO2YmnRgU&quot;,&quot;EzkyZefY5QI&quot;,&quot;RHmfvXO4dAc&quot;,&quot;krXrsq5MXmE&quot;,&quot;7KSlXBn9BFU&quot;,&quot;t0xr4dreV8g&quot;,&quot;wsX4dZj21pU&quot;,&quot;46OeYWZNXC4&quot;,&quot;u90MHVbJWLQ&quot;,&quot;j6DrUXCi55I&quot;,&quot;e5RxuXO1MGw&quot;,&quot;yQ12Q03RQ8M&quot;,&quot;1NU6c4CoOa4&quot;,&quot;l0EcOf-ivSI&quot;,&quot;Z1HSEsLo2M0&quot;,&quot;qDbl0gxu7Dc&quot;,&quot;EVztRfoZHQ0&quot;,&quot;yq-s6RegMzY&quot;,&quot;Mvx7WMFZ-ec&quot;,&quot;rynm5ii1gKI&quot;,&quot;hnDQzbAhQW0&quot;,&quot;RJBUHNiW_LA&quot;,&quot;z7PDxRpEuCM&quot;,&quot;GWYoMnviUTo&quot;,&quot;KJnKrh4HqO8&quot;,&quot;Qj18ci7ahXU&quot;,&quot;LVPTjW0HWCE&quot;,&quot;kKYJGL5zOdA&quot;,&quot;Gy3uG2sB0EI&quot;,&quot;EobwR1VvP6U&quot;,&quot;1e3oKKtT9Uc&quot;,&quot;9HT1Jq-pJsU&quot;,&quot;4mmTbQhYSe8&quot;,&quot;aCBmsv-Z0pY&quot;,&quot;XkytdbikWwQ&quot;,&quot;Kvh0Ks-xp_Q&quot;,&quot;Yo7Rro5aIJo&quot;,&quot;xlUjTuo11v4&quot;,&quot;3XpyQCxAFhE&quot;,&quot;upGOccVyjPk&quot;,&quot;U1XToo-yA0o&quot;,&quot;iTXIDqoozxY&quot;,&quot;Mpnaojg9CGg&quot;,&quot;G1Akiwn2b0k&quot;,&quot;YgEuC4B54Qw&quot;,&quot;owCh8KOVa1k&quot;,&quot;VE23gPaLWoI&quot;,&quot;ZKFksbkTKzI&quot;,&quot;xB1pPhgUSFo&quot;,&quot;2y9Nen8GedM&quot;,&quot;DmTxZSL0ezQ&quot;,&quot;S6L9d9oMP8k&quot;,&quot;NeaNEY_-HsQ&quot;,&quot;3lOEjy3G8zs&quot;,&quot;fabUIVQJS-U&quot;,&quot;AjlP3xVboPI&quot;,&quot;DOLK4E9CN44&quot;,&quot;xevdO-i_5X8&quot;,&quot;iBsClalmitY&quot;,&quot;tVAudOBNpSY&quot;,&quot;U5uXj1ITxvM&quot;,&quot;8ly91g6SpQY&quot;,&quot;Lx-QCSrwPVg&quot;,&quot;3Wd-AX8znpY&quot;,&quot;HVSxw2asHmw&quot;,&quot;BgtgmoAljkg&quot;,&quot;LEa03im5k5A&quot;,&quot;GofEE8LOGs4&quot;,&quot;86Swgtxs6Po&quot;,&quot;i3d1LspMBIU&quot;,&quot;PirEmJOo6CE&quot;,&quot;Lv6VILwZz1M&quot;,&quot;7YmUhQwq2YU&quot;,&quot;exePCusCm9k&quot;,&quot;H3PD7frrI_8&quot;,&quot;ghTqYWxoVrA&quot;,&quot;4rPNThNEQO4&quot;,&quot;P3o36TonBXE&quot;,&quot;5VsQd2ovTHY&quot;,&quot;HmwWy97ef5A&quot;,&quot;-0QlVaGlk1E&quot;,&quot;zO3Rl-rh6Bs&quot;,&quot;o9pkhKm_kAI&quot;,&quot;y5_fnfMm1_o&quot;,&quot;n9MQM919MDI&quot;,&quot;u73-_ofPYwA&quot;,&quot;WXWcfUwRWK8&quot;,&quot;PpyKc8dc4iQ&quot;,&quot;naEG81DttQk&quot;,&quot;4bMcrDV1vJs&quot;,&quot;BWNUqERTWyo&quot;,&quot;UCgOm1WvWB8&quot;,&quot;PjRJf-3i7wA&quot;,&quot;gCokmHyYIsk&quot;,&quot;o7Fkorc8xw4&quot;,&quot;0N81aj-0v8I&quot;,&quot;0Sts7wqwuhI&quot;,&quot;KmxQ9YvYP8U&quot;,&quot;1NuL1LFJqN4&quot;,&quot;EI9U85KR00k&quot;,&quot;sKTZ39Z55kM&quot;,&quot;RqGQRHwqD1Q&quot;,&quot;ToJ1hL_UxR8&quot;,&quot;BzVFH7dudGI&quot;,&quot;4YV-kJsnTY4&quot;,&quot;Hh1Ktyion00&quot;,&quot;cS0DksC2ThE&quot;,&quot;vVhUdj_6AJI&quot;,&quot;WBGEAkHIdEY&quot;,&quot;OhNypsK8dgs&quot;,&quot;KWgxgSwNQeg&quot;,&quot;wBq0yFH1NKA&quot;,&quot;by_kgenndME&quot;,&quot;Q3PfF8KQnnQ&quot;,&quot;qyubdFmpOzY&quot;,&quot;Fd4OuSQKSYc&quot;,&quot;M91jqRCuwSE&quot;,&quot;SZeFzFvvnww&quot;,&quot;1x9mR-8Jlk8&quot;,&quot;v60DhhXigj8&quot;,&quot;L2EtzWbmsSM&quot;,&quot;8OEh0WRIZpU&quot;,&quot;A6Fq0BDKUkI&quot;,&quot;B0fISmMwe0o&quot;,&quot;UJvXxTLMNCc&quot;,&quot;Oyit-UF0hU0&quot;,&quot;sJnT-ZBx-aw&quot;,&quot;w9DhHHmxkxk&quot;,&quot;09s8AsA_1_8&quot;,&quot;WpULC6QbFs8&quot;,&quot;oooZW-0Ib00&quot;,&quot;D6doByXH2qg&quot;,&quot;YNskJwjp2qs&quot;,&quot;GCwyct06ewQ&quot;,&quot;1wwGHpuoTRY&quot;,&quot;xCjBcNHVMN8&quot;,&quot;XXjCXeov7MU&quot;,&quot;j5pp75JMHLg&quot;,&quot;tN0Xhw1kXek&quot;,&quot;dnKc7ujewTg&quot;,&quot;508DpfT1xjM&quot;,&quot;7eeef5LwqBc&quot;,&quot;L3BFStFNPUc&quot;,&quot;b7Ap5MoqYOI&quot;,&quot;xBdrHXqTU9w&quot;,&quot;N7zUVxlp4kU&quot;,&quot;tqfJ3x337VE&quot;,&quot;jG4XesjoSfw&quot;,&quot;z79-HH7SgmA&quot;,&quot;Uu3qbMp9DVs&quot;,&quot;au8KcahWxG4&quot;,&quot;k2mDwz01YZk&quot;,&quot;f-vvDNc5mT0&quot;,&quot;Idg7R-9OI74&quot;,&quot;mhxE8xaaFi0&quot;,&quot;XryqTofd1tE&quot;,&quot;4yItBLDG6pc&quot;,&quot;zuKkQpziypw&quot;,&quot;9ewf9WEYy2M&quot;,&quot;uZK0M_K34MU&quot;,&quot;UIwzSvZYvBY&quot;,&quot;du0aqYDnd0Q&quot;,&quot;jy9azLipJbA&quot;,&quot;J-6yhQRz6_o&quot;,&quot;N3N2mQ7laF4&quot;,&quot;LtxnksrTXG0&quot;,&quot;-jqVIXfCkBI&quot;,&quot;P3MZsfQ4its&quot;,&quot;YVU1Ko9xKkU&quot;,&quot;s1R40DPur88&quot;,&quot;wfgny3djwGk&quot;,&quot;YLZ2x1-r6AQ&quot;,&quot;fUQX7gPNr7I&quot;,&quot;Cru4l_KrDv0&quot;,&quot;D1iuOpxeytw&quot;,&quot;FGhk31NdBoY&quot;,&quot;YPSW9YpFlu0&quot;,&quot;2ZST_JEpfRU&quot;,&quot;ZwH0E4EypOg&quot;,&quot;HA19BfHDrFk&quot;,&quot;blpoR8ooqI0&quot;,&quot;uI0KwvCqFVw&quot;,&quot;PoAI247TCWo&quot;,&quot;tF1gASEhQEQ&quot;,&quot;aZKK6d5IDbI&quot;,&quot;_jEgK66-ixg&quot;,&quot;2cb4Vt8EBEY&quot;,&quot;eXhlj12yOkM&quot;,&quot;-X9sVpmzkko&quot;,&quot;JTpPXmyER94&quot;,&quot;KDSkPksssrI&quot;,&quot;LV52_vn82tM&quot;,&quot;cvAu2-xaJ7k&quot;,&quot;KMq8JJYSSVM&quot;,&quot;92PtXvteSeI&quot;,&quot;obf4rmqWNfY&quot;,&quot;-0PT7-_5y58&quot;,&quot;5tzT5Aa2w58&quot;,&quot;-s9m266PR3A&quot;,&quot;xTyZVhbQ2l8&quot;,&quot;xNZgiBLUqWA&quot;,&quot;60zr04WK_7k&quot;,&quot;2wQegUuMv-A&quot;,&quot;SKeHyxQMBlg&quot;,&quot;7_n560myhjA&quot;,&quot;88TdVV7swU4&quot;,&quot;wpqmuNaET48&quot;,&quot;FVym7WQTBCM&quot;,&quot;oOm1eMCiNbQ&quot;,&quot;cgS1FTromKY&quot;,&quot;gLITbNSHRQ8&quot;,&quot;P_rMQK5w8lY&quot;,&quot;boJKjmTK_lg&quot;,&quot;QkiOMJ0nO-0&quot;,&quot;Wu8YElT21fQ&quot;,&quot;jcRegawJ4DY&quot;,&quot;Q_OW_A5uyYo&quot;,&quot;QQNVmwHBC1Y&quot;,&quot;MgasuaHMZow&quot;,&quot;c9M2OSRrLbY&quot;,&quot;rs-blPkEmSc&quot;,&quot;8IXc5BmlGBc&quot;,&quot;yrjrb_wK0fg&quot;,&quot;JLxWvfUO2lM&quot;,&quot;t0QIsLg7kxM&quot;,&quot;DZFKdRVzymw&quot;,&quot;_S5Njfgm0GA&quot;,&quot;bcd5L_UHATo&quot;,&quot;fvwi4hKxTFU&quot;,&quot;GnSUGxgUT54&quot;,&quot;d0y3Q-00ZNA&quot;,&quot;XBDsnpsmTYs&quot;,&quot;RrL4OcobwYI&quot;,&quot;5zf76gHJGto&quot;,&quot;_NoLH86yO7k&quot;,&quot;ub2uWc_mndk&quot;,&quot;RUqSACHf-Qo&quot;,&quot;XaUHVOpXCuA&quot;,&quot;Lo7qvHIWICk&quot;,&quot;MHw4wQ44ZjY&quot;,&quot;__yMErSqfK0&quot;,&quot;4atX5oRvoTU&quot;,&quot;R2Qd9Vf40g4&quot;,&quot;2m2UFpaB8NY&quot;,&quot;GyE0Z_1A6_M&quot;,&quot;LWnbLpF3AlU&quot;,&quot;mYQTMJnO6hs&quot;,&quot;dRl8xPKoXlQ&quot;,&quot;UabkSkq5wUs&quot;,&quot;lZ9e_43F0Vw&quot;,&quot;SK4NaWuUUhM&quot;,&quot;H2CMnpmSH1Y&quot;,&quot;WeKMvlBuDgc&quot;,&quot;9Ta7PW8cDL4&quot;,&quot;CXRRwU5k3U8&quot;,&quot;dwAlC6zcvl4&quot;,&quot;MoKrxAWu5Wk&quot;,&quot;S7uoR1gVw_A&quot;,&quot;6_hpi9qSz_M&quot;,&quot;VmwiIZ7OV6Y&quot;,&quot;NOS4reuwl-o&quot;,&quot;CSrD1srzfWE&quot;,&quot;KRH33rHzeh8&quot;,&quot;F6MBzJF7mTo&quot;,&quot;IRSb4qBbaGQ&quot;,&quot;L7Z3O1vw6bo&quot;,&quot;h6bTtr9qMf4&quot;,&quot;MUlyzmxEZ4I&quot;,&quot;OM7tycgoZyE&quot;,&quot;kEgajhCjKVU&quot;,&quot;Py0_yYTs3i4&quot;,&quot;Nwrlzz5L9Zc&quot;,&quot;RNmLNxM1cQg&quot;,&quot;jgih4zIJJQ0&quot;,&quot;Sclpx3BN4TQ&quot;,&quot;rTIvHfYbw_8&quot;,&quot;yJQXTCXlaDY&quot;,&quot;tHTXjVR-KlQ&quot;,&quot;ASue7eEeaYU&quot;,&quot;KwNNFTAYgYU&quot;,&quot;FgYHaJlEIws&quot;,&quot;b3EDCuFDlX8&quot;,&quot;9U3CAcmJB5M&quot;,&quot;_Gfhivl4oxY&quot;,&quot;-7DDBHcU8sU&quot;,&quot;RzGxbeOeF_E&quot;,&quot;IAnpo_fWCFs&quot;,&quot;lJGnVjwhxn4&quot;,&quot;4UWXEhA2_lw&quot;,&quot;nQi44X0yky8&quot;,&quot;dl8JAi-oy2E&quot;,&quot;qhdxInl7FnM&quot;,&quot;mI1FPIzucvI&quot;,&quot;uCsPGI_fKLY&quot;,&quot;b-HqkyuD1bw&quot;,&quot;Pf34zP-r0Vw&quot;,&quot;203nO3CQx8E&quot;,&quot;VTBS73N9HAA&quot;,&quot;mYiS70eXi2Y&quot;,&quot;nL7DkuSzTME&quot;,&quot;8gYPuHs3a3w&quot;,&quot;-6clJ54425g&quot;,&quot;ENEt6YPP-bA&quot;,&quot;3dcub25B8vo&quot;,&quot;c0C2q4uC2lU&quot;,&quot;vP1XuZFnCuY&quot;,&quot;d8eQGh2hmZs&quot;,&quot;DnwVCpFUa8c&quot;,&quot;o13RQmWafQQ&quot;,&quot;Fzeq5q7fZec&quot;,&quot;Rc3BiJyptyQ&quot;,&quot;0MTZ_4TpeCs&quot;,&quot;NWAlGoRayI8&quot;,&quot;_CxnGtd5wRc&quot;,&quot;GsJ52VMmOTA&quot;,&quot;4xoPkMY9jTY&quot;,&quot;FbVZX4QpLt0&quot;,&quot;vR8nfv-nuRw&quot;,&quot;hPDjW_WDLjE&quot;,&quot;Xt-KS-7yxIY&quot;,&quot;Af2EbXntrNo&quot;,&quot;YcWjPXF61bw&quot;,&quot;REFb1N0IOTU&quot;,&quot;Xq7RGuyXHac&quot;,&quot;0ZNk6o4eQW0&quot;,&quot;ndBFMQ4cfVg&quot;,&quot;1g3BJOTOjdg&quot;,&quot;Vw1noAhipyU&quot;,&quot;CzRRqzh2rc8&quot;,&quot;8AlSU3uYgwE&quot;,&quot;Fm4Hwq3yIv8&quot;,&quot;ox43bEl6Zd8&quot;,&quot;pZiOS2hX984&quot;,&quot;gYOE1g9t6WA&quot;,&quot;lqQ_R0A1Sjk&quot;,&quot;Fkzh2BXYX4c&quot;,&quot;F3M1Afx-foY&quot;,&quot;IVnxLf4VwnM&quot;,&quot;C2hzcRh8A94&quot;,&quot;UX5fDO8-CQ8&quot;,&quot;XwX-DcngYV8&quot;,&quot;YBsWk-mxIo0&quot;,&quot;vgcLJVrRlEg&quot;,&quot;wnAddG_K7DI&quot;,&quot;j5uKfryafHA&quot;,&quot;wIiIbwASTqc&quot;,&quot;EhtwtkSvWyA&quot;,&quot;769WvedTtbw&quot;,&quot;GyVMfFetXsI&quot;,&quot;nyIKQ5D123Q&quot;,&quot;STjTk8jwoQw&quot;,&quot;wMPyviYwxWU&quot;,&quot;0bD6qoS2sz4&quot;,&quot;v2F-dCCB-jY&quot;,&quot;qPVkEm7apu0&quot;,&quot;ZlCQKTIT3xA&quot;,&quot;_00UwBZX9p8&quot;,&quot;9OpPtRH61SM&quot;,&quot;Lgsw-yPW7d4&quot;,&quot;RIkobdBlBZ4&quot;,&quot;Iq_pCB-Dl8w&quot;,&quot;SzxXJQxdO9c&quot;,&quot;dkpEcuOHcSA&quot;,&quot;N71fY05Lsxg&quot;,&quot;szOc2LWxQHY&quot;,&quot;73bKxGIHYrs&quot;,&quot;qWL_QRAAH38&quot;,&quot;dDzkglVA6o8&quot;,&quot;GRo09AmIMak&quot;,&quot;fby9mwcYdnY&quot;,&quot;qY_FxwvWA_o&quot;,&quot;oIU6UL-coG0&quot;,&quot;6BrtQYvRy4g&quot;,&quot;UjWFmAEA79A&quot;,&quot;MpPWOGB3FuA&quot;,&quot;nrg-D07wy1M&quot;,&quot;WswpDPrmVM4&quot;,&quot;tl24wXyIONo&quot;,&quot;iHSN9Y-Vf_8&quot;,&quot;KLNPjVbwb7Q&quot;,&quot;-ihJHRKhIFQ&quot;,&quot;nE4YbY0sNH8&quot;,&quot;mZpSx73ozao&quot;,&quot;X01cwva4g8Q&quot;,&quot;t0rBJ2gxk9g&quot;,&quot;pvD8gIIUkyM&quot;,&quot;-Iv9fO-q5-I&quot;,&quot;-__thIfjTO4&quot;,&quot;zQf51_qR0zY&quot;,&quot;J0U_Gmw7MaI&quot;,&quot;mEUAdBA8w0Q&quot;,&quot;NfFZMjGmWVc&quot;,&quot;Lil5_uWyFbY&quot;,&quot;ejtUgTgppwU&quot;,&quot;QGIUnYo4UpQ&quot;,&quot;ibTsY0YlW6g&quot;,&quot;lwbcUgwM5l8&quot;,&quot;nbnh_kdDBfw&quot;,&quot;ucElDXT1Ygs&quot;,&quot;XtG7KQuTcio&quot;,&quot;tYIo5ApR9Eg&quot;,&quot;ZuTtJotj-LI&quot;,&quot;Ws_qpfu4CD0&quot;,&quot;bMLtbEUngkg&quot;,&quot;D1WpvfHFt0Y&quot;,&quot;m9RqegSPQsg&quot;,&quot;mgJ5hiy0WKw&quot;,&quot;rtfJGm6Rml0&quot;,&quot;JEv9tyXOnnc&quot;,&quot;UYiHvh9E2pU&quot;,&quot;TyooQUmlcOA&quot;,&quot;dcVWjjfgguU&quot;,];

    var videoId = allVideos[Math.floor(Math.random()*allVideos.length)];
    iframe.src = 'https://www.youtube.com/embed/' + videoId + &quot;?autoplay=&quot; + autoplay;

}

nextVideo(0);

&lt;/script&gt;

&lt;form&gt;

&lt;button onclick=&quot;nextVideo(1);return false&quot;&gt;Click to play next random video&lt;/button&gt;

&lt;/form&gt;

&lt;h1 id=&quot;step-1-wikipedia-api&quot;&gt;Step 1: Wikipedia API&lt;/h1&gt;

&lt;p&gt;The first step in creating these videos was to get some actual freely available content. For this I chose to use Wikipedia. This can be accessed using JSON/REST, and to quickly hack this into place I decided to use a framework called ‘Unirest’. This makes the while prototype easy:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// API URI for the English Wikipedia&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGLISH_WIKIPEDIA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://en.wikipedia.org/w/api.php&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Using a 'search query', name of the page, retrieve the content:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPageContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnirestException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Example URI created for query 'Stack Overflow': https://en.wikipedia.org/w/api.php?format=json&amp;amp;action=query&amp;amp;prop=extracts&amp;amp;titles=Stack%20Overflow&amp;amp;redirects=true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unirest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENGLISH_WIKIPEDIA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prop&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;extracts&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;titles&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redirects&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;JSONObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagesObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJSONObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJSONObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pages&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagesObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagesObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htmlContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagesObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJSONObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;extract&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htmlContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The resulting JSON (see this &lt;a href=&quot;https://en.wikipedia.org/w/api.php?format=json&amp;amp;action=query&amp;amp;prop=extracts&amp;amp;titles=Stack%20Overflow&amp;amp;redirects=true&quot;&gt;example&lt;/a&gt;) contains the Wikipedia page in simple processed HTML. From this HTML I used a library called ‘Jsoup’ to extract the plain text. The first alinea of text contains the introduction of the topic, this is what I’ve decided to use as content for the video. Initially I had &lt;em&gt;all&lt;/em&gt; the content of the page in the videos, but they quickly turned out to be 30+ minutes long and very boring.&lt;/p&gt;

&lt;p&gt;This is the code I used to go from HTML to the first alinea of text:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Clean the HTML, get inner text of first alinea and break into sentences.
 * @param htmlContent
 * @return
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanAndBreakIntoSentences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htmlContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jsoup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htmlContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Elements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// All the text is contained in paragraph elements:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Break the text into sentences using the smart JDK 'BreakIterator':&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BreakIterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breakIterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BreakIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSentenceInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;US&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;breakIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breakIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breakIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BreakIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breakIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fullText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// If we reach a header, stop processing, we only need the first section/alinea:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;h2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// We break on the first (sub-) title:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;step-2-stunning-visuals-with-java-2d&quot;&gt;Step 2: Stunning visuals with Java 2D&lt;/h1&gt;

&lt;p&gt;We have some text, now how do we turn this into a video? We need visuals! I decided to cut the content into seperate lines, and for each line I have a single ‘slide’. This is an (buffered) image created using Java’s 2D API and saved to file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * For each sentence, create a buffered image and paint some text on this.
 * We need the text to be 'wrapped', for this I repurpose a JTextArea, on a JPanel.
 * 
 * Also increase the font size so the text fits on the screen.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;paintText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graphics2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JPanel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOpaque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dimension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1920&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVisible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;JTextArea&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JTextArea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dimension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1920&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFocusable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBorder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BorderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEmptyBorder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BORDER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BORDER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BORDER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BORDER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setWrapStyleWord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLineWrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOpaque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Increase the font size as long as it fits on screen (and don't go bigger than 100, looks ugly):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPreferredScrollableViewportSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fontSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Futura&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Futura&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Print this panel on the Graphics2D object (which is a BufferedImage)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;step-3-text-to-speech&quot;&gt;Step 3: Text-To-Speech&lt;/h1&gt;

&lt;p&gt;Instead of using a Java Text-To-Speech (TTS) library, which aren’t very clear or good, I decided to use the build-in OS/X command ‘say’.
On the command line you can execute: &lt;code class=&quot;highlighter-rouge&quot;&gt;say Hello world!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The ‘say’ command supports different voices and also has the ability to store the output in a file. Which is perfect for us!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// Execute the say command with a given filename, voice and sentence to speak:&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;say -o &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; -v &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; -r 210 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Wait for the say-command to finish&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;waitFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;step-4-putting-it-all-together&quot;&gt;Step 4: Putting it all together&lt;/h1&gt;

&lt;p&gt;What do we have now? A list of sentences from Wikipedia, for each sentence we have an image and we have an audio snippet created with TTS. Now it is time to put everything together and create a video.
The easiest way to do this is to use ffmpeg, a powerful command line video tool. To make this easier I created a small method ‘executeCommandLine’ which does the same thing as the snippet with ‘Runtime.getRuntime().exec’ shown above.&lt;/p&gt;

&lt;p&gt;Combine the image (png file) and the TTS audio (mp4 file) into a series of MPG files:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VikipediaSentence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFilename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Combine audio and image into a short video:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;executeCommandLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ffmpeg -loop 1 -y -i &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.png -i &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.mp4 -tune stillimage -shortest &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.mpg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We now have a series of small MPG files. They need to be combined into a single video. For this we need a text file which contains a list of all the MPG files. This is stored on disc and next we execute the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//merge all:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;executeCommandLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ffmpeg -f concat -safe 0 -i output/snippet_list.txt -c copy output/output.mpg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next we convert the video from one large MPG to MP4 file (which is a nicer, compressed format):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//convert to mp4:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;executeCommandLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ffmpeg -i output/output.mpg -c:v libx264 -c:a aac -strict experimental -b:a 192k -pix_fmt yuv420p -shortest output/output.mp4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And to add a little more ‘production value’ I’ve gone online and found some soothing (free, creative commons) background music. This music is looped into a large audio file of 50 minutes (enough for all videos). Again using ffmpeg the audio is mixed in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// add background music:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;executeCommandLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ffmpeg -i output/output.mp4 -i input/background_loop.mp3 -filter_complex amerge -c:v copy -c:a aac -strict experimental output/finaloutput.mp4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There it is, we have a complete video with text audio, text visuals and background music! Only one thing left to do, uploading to YouTube!&lt;/p&gt;

&lt;h1 id=&quot;step-5-uploading-everything-to-youtube&quot;&gt;Step 5: Uploading everything to YouTube&lt;/h1&gt;

&lt;p&gt;To automate the process of uploading, I first needed a place to put the videos, so I created a new YouTube channel named: &lt;a href=&quot;https://www.youtube.com/channel/UCSjEbLaNj1yKFgQpjLoqkUw&quot;&gt;Vikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we can use the Google YouTube Data API. It turns out this is &lt;em&gt;very&lt;/em&gt; easy and well documented. I don’t even need to share the code I wrote here because I used the example from Google’s website itself! Check out this &lt;a href=&quot;https://developers.google.com/youtube/v3/code_samples/java#upload_a_video&quot;&gt;amazing documentation&lt;/a&gt;. Very detailed and does exactly what I needed it to do.&lt;/p&gt;

&lt;p&gt;The example code takes a video file and uploads it. The only things I changed were setting the correct description, I was ready to generate all the content!&lt;/p&gt;

&lt;h1 id=&quot;not-implemented-yet&quot;&gt;Not implemented (yet?)&lt;/h1&gt;

&lt;p&gt;Things I wanted to implement (but didn’t and probably never will):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add a little color to the videos (black and white is boring)&lt;/li&gt;
  &lt;li&gt;Add &lt;a href=&quot;https://trac.ffmpeg.org/wiki/Waveform&quot;&gt;waveform&lt;/a&gt; from ffmpeg (just to keep it visually interesing)&lt;/li&gt;
  &lt;li&gt;Download (did this) and use (didn’t do this) the images from the Wikipedia page and add those to the video&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Yes, it is pretty easy to hack together a bot to create YouTube videos.&lt;/li&gt;
  &lt;li&gt;No, the quality isn’t &lt;em&gt;that&lt;/em&gt; good… yet?&lt;/li&gt;
  &lt;li&gt;Yes, it can be made in a single afternoon!&lt;/li&gt;
  &lt;li&gt;No, I’m not going to automate the spidering of Wikipedia and upload a million videos… (but I could easily do that!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Up to now all the videos created are based on a small list of ‘hot topics’ I found on Wikipedia and Twitter. I don’t want to automate the entire process and flood YouTube, the content just isn’t good enough for that. But it was a fun project for a lazy afternoon! I’ve learned a lot of new tricks, maybe you can benefit from that as well.&lt;/p&gt;

&lt;p&gt;The next thing I want to do with the 400+ YouTube videos I’ve generated is to see how (and if) people are going to watch them. Do they show up in the search results? Which topics are searched and watched? Maybe more on that in a future post!&lt;/p&gt;

&lt;p&gt;Do &lt;strong&gt;you&lt;/strong&gt; have any good ideas on how to generate videos, let me know in the &lt;strong&gt;comments&lt;/strong&gt;!
I’ve created a bot that generates music some years, maybe I should improve that bot to upload its own YouTube music videos? ;-)&lt;/p&gt;

</description>
        <pubDate>Mon, 30 Jan 2017 13:28:12 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2017/01/vikipedia-a-java-youtube-bot/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2017/01/vikipedia-a-java-youtube-bot/</guid>
        
        <category>Java</category>
        
        <category>Bot</category>
        
        <category>Wikipedia</category>
        
        <category>API</category>
        
        <category>Vikipedia</category>
        
        <category>ffmpeg</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Three new JEPs</title>
        <description>&lt;p&gt;This morning &lt;a href=&quot;https://twitter.com/mreinhold&quot;&gt;Mark Reinhold&lt;/a&gt; submitted three brand new JEPs (JDK Enhancement Proposal).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/300&quot;&gt;JEP 300&lt;/a&gt;: Augment Use-Site Variance with Declaration-Site Defaults&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/301&quot;&gt;JEP 301&lt;/a&gt;: Enhanced Enums&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/302&quot;&gt;JEP 302&lt;/a&gt;: Lambda Leftovers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These proposals are enhancements to the JDK (Java Development Kit) and OpenJDK. A long term roadmap for the JDK projects, a look into what the future of Java might hold.&lt;/p&gt;

&lt;p&gt;Let’s dive right in and take a quick look on what these proposals actually are!&lt;/p&gt;

&lt;h1 id=&quot;jep-300-augment-use-site-variance-with-declaration-site-defaults&quot;&gt;JEP 300: Augment Use-Site Variance with Declaration-Site Defaults&lt;/h1&gt;

&lt;p&gt;When you currently use Java Generics you probably already know about wildcards. It is possible to set lower and upper bounds to generics using the keywords &lt;strong&gt;? extends&lt;/strong&gt; and &lt;strong&gt;? super&lt;/strong&gt;. There are two parts to using wildcards, declaration side and use side, this JEP focusses mainly on making the use side easier and more powerful.&lt;/p&gt;

&lt;h2 id=&quot;declaration-side&quot;&gt;Declaration side&lt;/h2&gt;

&lt;p&gt;It is possible to set a bound with a wildcard on the declaration side:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shelter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example we’ve declared that the Shelter has to contain Animals. It is possible to create an Shelter&amp;lt;Cat&amp;gt; or Shelter&amp;lt;Dog&amp;gt; now, but not Shelter&amp;lt;Bike&amp;gt;.&lt;/p&gt;

&lt;h2 id=&quot;use-side&quot;&gt;Use side&lt;/h2&gt;

&lt;p&gt;The second way to use wildcards is on the &lt;em&gt;use&lt;/em&gt; side. There we can speak of so called &lt;strong&gt;in&lt;/strong&gt; and &lt;strong&gt;out&lt;/strong&gt;-variable wildcards.&lt;/p&gt;

&lt;p&gt;The following code uses the ‘extends’ keyword to create the &lt;strong&gt;in&lt;/strong&gt;-variable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Using extends we create an 'in' variable:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inAnimals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// From the inAnimals we can read: Animal (not subclasses)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- reading Animal is fine&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- compile error, we can't read Cat&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// We can write: nothing (!) making it almost read-only&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- compile error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is also the ‘super’ keyword (not very common) to create an &lt;strong&gt;out&lt;/strong&gt;-variable use side:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Using super we create an 'out' variable, setting an upper bound:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outAnimals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// From the outAnimals we can read: object (no superclasses!)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- compile error, illegal&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- we can only read object&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// On the write side, we've set a bound to Cat:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- correct!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- compile error&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outAnimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- compile error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;so-what-is-jep-300&quot;&gt;So what is JEP 300?&lt;/h2&gt;

&lt;p&gt;The motivation of the JEP states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Since invariant uses of these type arguments are less flexible than their wildcard equivalents, while providing no extra power, a reasonable practice is to always use a wildcard when mentioning the type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is almost always more powerful and equivalent to use wildcards on the use side. The problem is that this is verbose and adds a lot of noise to your code. The proposal wants to make it possible to declare (at the declaration side) what the default wildcard strategy should be.&lt;/p&gt;

&lt;p&gt;For example look at the following code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contravariant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;covariant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// other possible syntaxes are Function&amp;lt;-T, +R&amp;gt; or Function&amp;lt;in T, out R&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler can now automatically treat every use of the type e.g., Function&amp;lt;String, Number&amp;gt; as if it had wildcards Function&amp;lt;? super String, ? extends Number&amp;gt;.&lt;/p&gt;

&lt;p&gt;On the use side the proposal says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rather than making changes to subtyping, we preprocess the source code so that types like Function&amp;lt;String, Number&amp;gt; are implicitly expanded to Function&amp;lt;? super String, ? extends Number&amp;gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This should make it more powerful and just as readable to using wildcards by default without even noticing them.&lt;/p&gt;

&lt;h1 id=&quot;jep-301-enhanced-enums&quot;&gt;JEP 301: Enhanced Enums&lt;/h1&gt;

&lt;p&gt;The next proposal Mark has submitted is about using Enums with Generics. Look at the following example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;BELLA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bella&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BUDDY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Buddy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIGGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tigger&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have an enum with three pets. These pets have an instance of an animal inside them. And we have a way of retrieving them.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BELLA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints: &quot;Bella&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But one thing we can’t do it call the method “.bark()” on BELLA, because we don’t know this is a Dog.&lt;/p&gt;

&lt;p&gt;The proposal JEP 301 wants to make it possible to correlate a specific type to an enum constant:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;BELLA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bella&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BUDDY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Buddy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIGGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tigger&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Having coupled the Dog type to enum BELLA it should now we possible to call:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BELLA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// WOOF!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TIGGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;purr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Purrrrrrrrr.....&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;jep-302-lambda-leftovers&quot;&gt;JEP 302: Lambda Leftovers&lt;/h1&gt;

&lt;p&gt;This is turning out to be a rather long blogpost but we’ve reached the final proposed JEP of the day: &lt;strong&gt;Lambda Leftovers&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;accidental-ambiguities&quot;&gt;Accidental ambiguities&lt;/h2&gt;

&lt;p&gt;One of the problems people are having with the lambdas at the moment, and this JEP wants to improve, are accidental ambiguities.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- compile error&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Ambiguous method call. Both:
 * apply (Predicate&amp;lt;Animal&amp;gt;)        in classname and
 * apply (Function&amp;lt;Animal, String&amp;gt;) in classname match
 */&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why are we having this problem? Both methods are possible candidates of the lambda. If we look further and see the return type ‘boolean’ it should be clear we wanted to call the Predicate method and not the Function (which should return a String). Right now this doesn’t work, but it is something the compiler could figure out for us.&lt;/p&gt;

&lt;h2 id=&quot;underscores&quot;&gt;Underscores&lt;/h2&gt;

&lt;p&gt;Up to Java 8 it was perfectly acceptable to use the underscore character ‘_’ as a variable name. But this has been changed, all leading up to JEP 302. In most languages with lambda’s it is possible to denote certain inputs as &lt;em&gt;unused&lt;/em&gt;. This is done using the underscore. In Java this causes problems because it is right now a valid variable name.&lt;/p&gt;

&lt;p&gt;Starting with Java 8 the use of an underscore as lambda argument caused a warning and from Java 9 the use of an underscore became an error. This allows future Java versions beyond 9 to be able to use the underscore for other purposes. And one of those purposes is to bring it back as a default variable name. Not causing collisions if used multiple times and it can’t be used as variable by calling _.toString() for example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Ignore the second parameter, just use i:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BiFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Even possible, ignore both:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BiFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;someString&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;shadowing-of-parameters&quot;&gt;Shadowing of parameters&lt;/h2&gt;

&lt;p&gt;Another small change that is proposed is allowing to shadow parameters. For example look at the following code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computeSomeKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeIfAbsent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// compile error, key already defined&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeIfAbsent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// compile error, can't redefine key inside this scope&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In both cases ‘key’ is already defined, can’t be used as a parameter or local variable inside the lambda. The proposal wants to lift this restriction, allowing the use of ‘key’ as a parameter or as a local inside the lambda using so called ‘shadowing’.&lt;/p&gt;

&lt;p&gt;One possible drawback is readability, and I too think that this might be a problem.
For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;theInitialKey&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeIfAbsent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;theShadowKey&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- delete this&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second variable “theShadowKey” is taking the place of the first “theInitialKey”. This can be quite confusing because if you delete the second declaration nothing would break. The other variable would come from the shadows and take its place. This feels dangerous and confusing to me, not very ‘Java’-like.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Another day, three new JEPs submitted. Java is moving forward and trying to improve the user experience with genetics and lambdas. These proposals look like good, small, low-impact improvements that can really benefit the common programmer.&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Dec 2016 07:28:12 +0100</pubDate>
        <link>http://royvanrijn.com/blog/2016/12/three-new-jeps/</link>
        <guid isPermaLink="true">http://royvanrijn.com/blog/2016/12/three-new-jeps/</guid>
        
        <category>JEP</category>
        
        <category>Java</category>
        
        <category>Enhancement</category>
        
        <category>Proposal</category>
        
        <category>Reinhold</category>
        
        <category>OpenJDK</category>
        
        <category>JDK</category>
        
        
        <category>Programming</category>
        
      </item>
    
  </channel>
</rss>
